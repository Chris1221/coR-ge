{
    "contents" : "#' Correction of Genomes in R\n#'\n#' Software for the Examination of Multiple Correction Methodologies in Accurate Genomic Environments\n#'\n#' @param i i index.\n#' @param j j index.\n#' @param path.base Base of the path.\n#' @param summary.file Path to summary file.\n#' @param output Output stream to write to.\n#' @param test testing (only read one gen file)\n#' @param safe Don't delete files\n#'\n#' @import foreach\n#' @import devtools\n#' @importFrom lazyeval interp\n#' @importFrom data.table fread fwrite\n#' @importFrom magrittr %<>%\n#' @importFrom dplyr mutate mutate_ filter filter_ select select_ sample_n %>%\n#'\n#' @return Flat file at specified path.\n#' @export\n\nanalyze <- function(i = double(), j = double(), mode = \"default\", path.base = \"/scratch/hpc2862/CAMH/perm_container/container_\", summary.file = \"/scratch/hpc2862/CAMH/perm_container/snp_summary2.out\", output = \"~/repos/coR-ge/data/test_run2.txt\", test = TRUE, safe = TRUE){\n\n\n\t\tmessage(\"Error Checking\")\n\n\tif(any(is.null(c(i,j,path.base, summary.file)))) stop(\"Please complete all input arguemnets\")\n\n\tpath <- paste0(path.base,i,\"_\",j,\"/\")\n\tsetwd(path)\n\n\n\t\tmessage(\"Deleting junk files...\")\n\n\tlist.files(path)[!grepl(\"controls.gen\", list.files(path))] %>%\n\t\tfile.remove\n\n\t\tmessage(\"Reading in genotype files...\")\n\n\t\tif(!test){\n\n\tfor(k in 1:5){\n\t\tif(k == 1){\n\t\t\tfread(paste0(path, \"chr1_block_\", i, \"_perm_\", j, \"_k_\", k, \".controls.gen\"), h = F, sep = \" \") %>% as.data.frame() -> gen\n\t\t} else if(k != 1){\n\t\t\tfread(paste0(path, \"chr1_block_\", i, \"_perm_\", j, \"_k_\", k, \".controls.gen\"), h = F, sep = \" \") %>% as.data.frame() %>% select(.,-V1:-V5) %>% cbind(gen, .) -> gen\n\t\t}\n\t}\n\n\t\t} else if(test){\n\t\t  k <- 1\n\n\t\t  gen <- fread(paste0(path, \"chr1_block_\", i, \"_perm_\", j, \"_k_\", k, \".controls.gen\"), h = F, sep = \" \") %>% as.data.frame()\n\t\t}\n\n\tcolnames(gen) <- paste0(\"V\",1:ncol(gen))\n\n\tsummary <- fread(summary.file, h = T, sep = \" \")\n\n\n# \t     ___         __                _  _\n# \t    /   \\  ___  / _|  __ _  _   _ | || |_\n# \t   / /\\ / / _ \\| |_  / _` || | | || || __|\n# \t  / /_// |  __/|  _|| (_| || |_| || || |_\n# \t/___,'   \\___||_|   \\__,_| \\__,_||_| \\__|\n#\n\n\n\tif(is.null(mode) || mode == \"default\"){\n\n\n    \t\tmessage(\"Selecting Causal SNPs\")\n\n    \tsnps <- causal.snps(summary, mode = \"default\")\n    \tcolnames(snps)[3] <- \"V3\"\n\n\n    \t\tmessage(\"Merging together and converting from Oxford to R format...\")\n\n    \tcomb <- as.data.frame(merge(gen, snps, by = \"V3\"))\n\n    \t\tcomb$rsid <- NULL\n    \t\tcomb$chromosome <- NULL\n    \t\tcomb$all_maf <- NULL\n    \t\tcomb$k <- NULL\n    \t\tcomb$chromosomes <- NULL\n\n    \t\tWAS <- calculate_was(gen = comb, snps = snps)\n\n    \tsamp$Z <- as.character(foreach(q = 1:length(WAS), .combine = 'c') %do% WAS[q] + rnorm(1, 0, sd = sqrt(0.55)))\n\n\n    \tvar <- data.frame(0, 0, 0, \"P\")\n    \tsamp$Z <- as.character(samp$Z)\n    \tcolnames(var) <- colnames(samp)\n    \tsamp <- rbind(var, samp)\n\n    \tmessage(\"Writing out temp files\")\n\n    \tfwrite(samp, paste0(path,\"phen_test.sample\"), quote = FALSE, col.names = T, sep = \"\\t\")\n    \tfwrite(gen, paste0(path,\"gen_test.gen\"), quote = FALSE, col.names = F, sep = \"\\t\")\n\n    # ----------------------------------------------\n\n    \tmessage(\"Cleaning up\")\n\n    \tif(!safe){\n      \tfor(k in 1:5){\n      \t  system(paste0(\"rm chr1_block_\",i, \"_perm_\", j,\"_k_\", k, \".controls.gen\"))\n      \t}\n    \t}\n\n    \tmessage(\"Bash calls\")\n\n    \tsystem(paste0(\"/home/hpc2862/Programs/binary_executables/gtool -G --g gen_test.gen --s phen_test.sample --ped \", i, \"_\", j, \"_out.ped --map \", i, \"_\", j, \"_out.map --phenotype Z\"))\n\n    \tif(!safe){\n      \tsystem(\"rm gtool.log\")\n      \tsystem(\"rm gen_test.gen\")\n      \tsystem(\"rm phen_test.sample\")\n      }\n\n    \tsystem(paste0(\"/home/hpc2862/Programs/binary_executables/plink --noweb --file \",path, i, \"_\", j, \"_out --assoc --allow-no-sex --out \", path, \"plink\"))\n\n\n    \tif(!safe){\n      \tsystem(\"rm plink.log\")\n      \tsystem(\"rm plink.nosex\")\n      \tsystem(paste0(\"rm \", i, \"_\", j, \"_out.ped\"))\n      \tsystem(paste0(\"rm \", i, \"_\", j, \"_out.map\"))\n    \t}\n    # -----------------------------------------\n\n    \tmessage(\"Performing correction\")\n\n    \tsnps %>% select(rsid) %>% as.vector -> snp_list\n\n      n_strata <- 2\n      strata <- stratify(snp_list = snp_list, summary = summary, p = 0.5, n_strata = n_strata)\n\n      out <- correct(strata=strata, n_strata = n_strata, assoc = \"plink.qassoc\", group = FALSE)\n\n\n\n#            ___                                       _\n#           / _ \\ _ __   ___   _   _  _ __    ___   __| |\n#          / /_\\/| '__| / _ \\ | | | || '_ \\  / _ \\ / _` |\n#         / /_\\\\ | |   | (_) || |_| || |_) ||  __/| (_| |\n#         \\____/ |_|    \\___/  \\__,_|| .__/  \\___| \\__,_|\n#                                    |_|\n\n\n\n  } else if(mode == \"grouped\"){\n\n    message(\"Selecting Causal SNPs\")\n\n    snps <- causal.snps(summary, mode = \"grouped\")\n    colnames(snps)[3] <- \"V3\"\n\n\n    message(\"Merging together and converting from Oxford to R format...\")\n\n    comb <- as.data.frame(merge(gen, snps, by = \"V3\"))\n\n    comb$rsid <- NULL\n    comb$chromosome <- NULL\n    comb$all_maf <- NULL\n    comb$k <- NULL\n    comb$chromosomes <- NULL\n\n    WAS <- calculate_was(gen = comb, snps = snps)\n\n    samp$Z <- as.character(foreach(q = 1:length(WAS), .combine = 'c') %do% WAS[q] + rnorm(1, 0, sd = sqrt(0.55)))\n\n\n    var <- data.frame(0, 0, 0, \"P\")\n    samp$Z <- as.character(samp$Z)\n    colnames(var) <- colnames(samp)\n    samp <- rbind(var, samp)\n\n    message(\"Writing out temp files\")\n\n    fwrite(samp, paste0(path,\"phen_test.sample\"), quote = FALSE, col.names = T, sep = \"\\t\")\n    fwrite(gen, paste0(path,\"gen_test.gen\"), quote = FALSE, col.names = F, sep = \"\\t\")\n\n    # ----------------------------------------------\n\n    message(\"Cleaning up\")\n\n    if(!safe){\n      for(k in 1:5){\n        system(paste0(\"rm chr1_block_\",i, \"_perm_\", j,\"_k_\", k, \".controls.gen\"))\n      }\n    }\n\n    message(\"Bash calls\")\n\n    system(paste0(\"/home/hpc2862/Programs/binary_executables/gtool -G --g gen_test.gen --s phen_test.sample --ped \", i, \"_\", j, \"_out.ped --map \", i, \"_\", j, \"_out.map --phenotype Z\"))\n\n    if(!safe){\n      system(\"rm gtool.log\")\n      system(\"rm gen_test.gen\")\n      system(\"rm phen_test.sample\")\n    }\n\n    system(paste0(\"/home/hpc2862/Programs/binary_executables/plink --noweb --file \",path, i, \"_\", j, \"_out --assoc --allow-no-sex --out \", path, \"plink\"))\n\n\n    if(!safe){\n      system(\"rm plink.log\")\n      system(\"rm plink.nosex\")\n      system(paste0(\"rm \", i, \"_\", j, \"_out.ped\"))\n      system(paste0(\"rm \", i, \"_\", j, \"_out.map\"))\n    }\n    # -----------------------------------------\n\n    message(\"Performing correction\")\n\n    snps %>% select(rsid) %>% as.vector -> snp_list\n\n    n_strata <- 2\n    strata <- stratify(snp_list = snp_list, summary = summary, p = 0.5, n_strata = n_strata)\n\n    out <- correct(strata=strata, n_strata = n_strata, assoc = \"plink.qassoc\", group = TRUE, group_name = \"k\")\n\n\n\n\n#           ,--.   ,------.\n#           |  |   |  .-.  \\\n#           |  |   |  |  \\  :\n#           |  '--.|  '--'  /\n#           `-----'`-------'\n\n\n  } else if(mode == \"ld\"){\n\n\n    message(\"Selecting Causal SNPs\")\n\n    snps <- causal.snps(summary, mode = \"default\")\n    colnames(snps)[3] <- \"V3\"\n\n    message(\"Merging together and converting from Oxford to R format...\")\n\n    comb <- as.data.frame(merge(gen, snps, by = \"V3\"))\n\n    comb$rsid <- NULL\n    comb$chromosome <- NULL\n    comb$all_maf <- NULL\n    comb$k <- NULL\n    comb$chromosomes <- NULL\n\n    WAS <- calculate_was(gen = comb, snps = snps)\n\n    samp$Z <- as.character(foreach(q = 1:length(WAS), .combine = 'c') %do% WAS[q] + rnorm(1, 0, sd = sqrt(0.55)))\n\n\n    var <- data.frame(0, 0, 0, \"P\")\n    samp$Z <- as.character(samp$Z)\n    colnames(var) <- colnames(samp)\n    samp <- rbind(var, samp)\n\n    message(\"Writing out temp files\")\n\n    fwrite(samp, paste0(path,\"phen_test.sample\"), quote = FALSE, col.names = T, sep = \"\\t\")\n    fwrite(gen, paste0(path,\"gen_test.gen\"), quote = FALSE, col.names = F, sep = \"\\t\")\n\n    message(\"Cleaning up\")\n\n    if(!safe){\n      for(k in 1:5){\n        system(paste0(\"rm chr1_block_\",i, \"_perm_\", j,\"_k_\", k, \".controls.gen\"))\n      }\n    }\n\n    message(\"Bash calls\")\n\n    system(paste0(\"/home/hpc2862/Programs/binary_executables/gtool -G --g gen_test.gen --s phen_test.sample --ped \", i, \"_\", j, \"_out.ped --map \", i, \"_\", j, \"_out.map --phenotype Z\"))\n\n    if(!safe){\n      system(\"rm gtool.log\")\n      system(\"rm gen_test.gen\")\n      system(\"rm phen_test.sample\")\n    }\n\n    system(paste0(\"/home/hpc2862/Programs/binary_executables/plink --noweb --file \",path, i, \"_\", j, \"_out --assoc --allow-no-sex --out \", path, \"plink\"))\n\n    if(!safe){\n      system(\"rm plink.log\")\n      system(\"rm plink.nosex\")\n      system(paste0(\"rm \", i, \"_\", j, \"_out.ped\"))\n      system(paste0(\"rm \", i, \"_\", j, \"_out.map\"))\n    }\n    # -----------------------------------------\n\n\tmessage(\"Calculating LD...\")\n\n\t#write out a list of causal SNPs\n  snps %>% select(rsid) %>% as.vector -> snp_list\n  write.table(snp_list, paste0(path, \"list.txt\"), col.names = F, row.names = F, quote = F)\n\n  system(paste0(\"/home/hpc2862/Programs/binary_executables/plink2 --file \", path, i, \"_\", j, \"_out --r2 --ld-snp-list \", path ,\"list.txt --ld-window 99999 --ld-window-kb 500 --ld-window-r2 0.2 --allow-no-sex --out \", path, \"list\"))\n\n  ld <- fread(paste0(path, \"list.ld\"), h = T)\n\n\tmessage(\"Performing correction\")\n\n    n_strata <- 2\n    strata <- stratify(snp_list = snp_list, summary = summary, p = 0.5, n_strata = n_strata)\n\n  #th = threshold\n\n  strata$k <- as.factor(strata$k)\n  strata$ld <- 0\n\n  for(th in c(0.2, 0.4, 0.6, 0.8, 0.9, 1)){\n\n  \t#snp_b <- ld %>% filter(R2 > th) %>% select(SNP_B) %>% sort %>% unique\n\n\t#Try non dplyr here too\n  \tsnp_b <- unique(ld$SNP_B[ld$R2 > th])\n\n  \t# old, untested, does not conform to grouping to k\n  \t#strata %<>% SE_mutate(col1 = rsid, col2 = snp_b,new_col_name = paste0(\"th\", th))\n\n\t# New, attempt to conform to group to k.\n  \t# Not dplyr but maybe depricate later\n\n  \tstrata$ld[strata$rsid %in% snp_b] <- th\n\n  }\n\n  strata$ld %<>% as.double\n\n    out <- correct(strata=strata, n_strata = n_strata, assoc = \"plink.qassoc\", group = TRUE, group_name = \"k\", mode = \"ld\")\n\n\n  }\n\n\n\n\n  if(!file.exists(output)) suppressWarnings(write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)\n}\n",
    "created" : 1465146755466.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1689608441",
    "id" : "1D4A778D",
    "lastKnownWriteTime" : 1465162952,
    "path" : "~/repos/coR-ge/R/analyze.R",
    "project_path" : "R/analyze.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}