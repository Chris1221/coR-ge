return(c(fp, tp, fdr))
}
document()
document()
install.packages("pacman")
document()
___         __                _  _
/   \  ___  / _|  __ _  _   _ | || |_
/ /\ / / _ \| |_  / _` || | | || || __|
/ /_// |  __/|  _|| (_| || |_| || || |_
/___,'   \___||_|   \__,_| \__,_||_| \__|
use_travis()
library(devtools)
use_travis()
use_appveyor()
use_code_of_conduct()
use_testthat()
use_coverage()
library(covr)
install.packages("covr")
use_coverage()
library(coRge)
analyze(i=3, j=3)
analyze
analyze
analyze
coRge::analyze()
remove.packages("coRge", lib="~/repos/coR-ge/packrat/lib/x86_64-apple-darwin13.4.0/3.2.3")
library(coRge)
analyze
coRge::analyze
package_version(coRge)
package_version("coRge")
packageVersion("coRge")
analyze
packageVersion()
packageVersion("coRge")
document()
strata
r <- data.frame("0.6" = vector())
r
f <- "0.6"
f
r <- data.frame(f = vector())
r
r <- data.frame(eval(f) = vector())
r <- data.frame(get(f) = vector())
r <- data.frame(as.character(f) = vector())
library(crayon)
cat(blue("Hello", "world!\n"))
strata
head(strata)
f
strata %>% mutate_(paste0("th_", f, "= 0"))
library(dplyr)
strata %>% mutate_(paste0("th_", f, "= 0"))
strata %>% mutate_(paste0("th_", f, "= 0")) -> s2
strata %>% mutate_(paste0("th_", f, "= 0"))  -> strata2
strata2 <- strata %>% mutate_(paste0("th_", f, "= 0"))
strata2 <- strata %>% mutate_(paste0(f, "= 0"))
strata2 <- strata %>% mutate_(paste0("th_", f, "= 0"))
paste0("th_", f, "= 0")
strata %>% mutate_(paste0("th_", f, "= 0"))
strata %>% mutate_(paste0("th_", as.character(f), "= 0"))
strata %>% mutate_(paste0("th_", as.character(f), "= 0"))
f <- "th_0.7"
strata %>% mutate_(paste0(f, "= 0"))
strata %>% mutate_(paste0(f, "= 0")) -> s2
strata %>% mutate_(paste0(f, "= 0"))
f <- "th_07"
strata %>% mutate_(paste0(f, "= 0"))
strata %>% mutate_(paste0(f, "= 0")) -> s2
strata %>% mutate_(paste0("th_07_th = 0"))
strata %>% mutate_(paste0("th_07_th = 0")) -> s2
strata %>% mutate_(paste0("th = 0")) -> s2
colnames(s2)
strata %>% mutate_(as.name(f) == 0) -> s2
colnames(s2)
f
as.name(f)
strata %>% mutate(as.name(f) == 0) -> s2
colnames(s2)
strata %>% mutate_(paste0(as.name(f), " = 0") -> s2
strata %>% mutate_(paste0(as.name(f), " = 0")) -> s2
strata %>% mutate_(as.name(f) == 0) -> s2
colnames(s2)
strata %>% mutate_(as.name(f) = 0) -> s2
strata %>% mutate_(as.name(f) = BP-k) -> s2
strata %>% mutate(as.name(f) = BP-k) -> s2
strata %>% mutate_(paste0(as.name(f), " = BP-k")) -> s2
strata %>% mutate_(.dots =paste0(as.name(f), " = BP-k")) -> s2
var <- "k"
l <- paste(var, "==",  "'blue'")
l <- paste("new_var =", var, "==",  "'blue'")
strata %>% mutate_(.dots = l)
strata %>% mutate_(.dots = l) -> s2
list
snps
snps$rsid -> snp_b
snp_b
nrow(strata)
strata %>% mutate(rsid %in% snp_b)
library(dplyr)
strata %>% mutate(rsid %in% snp_b)
strata %>% mutate(in = rsid %in%a snp_b)
strata %>% mutate(new = rsid %in%a snp_b)
strata %>% mutate(new = rsid %in% snp_b)
strata <- SE_mutate(col1="rsid", col2="snp_b", new_col_name = "new2", df = strata)
#' Automated standard evaluation of mutate with %in% operator.
#'
#' @param col1 col1 %in% col2
#' @param col2 col1 %in% col2
#' @param new_col_name Name of new column. Can be passed as variable.
#' @param df Data frame to append to.
#'
#' @import dplyr
#' @import lazyeval
#'
#' @return Data frame with ncol(df)+1 columns.
#' @export
SE_mutate <- function(col1, col2, new_col_name, df) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %<>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
return(df)
}
strata <- SE_mutate(col1="rsid", col2="snp_b", new_col_name = "new2", df = strata)
library(magrittr)
strata <- SE_mutate(col1="rsid", col2="snp_b", new_col_name = "new2", df = strata)
#' Automated standard evaluation of mutate with %in% operator.
#'
#' @param col1 col1 %in% col2
#' @param col2 col1 %in% col2
#' @param new_col_name Name of new column. Can be passed as variable.
#' @param df Data frame to append to.
#'
#' @import dplyr
#' @import lazyeval
#' @import magrittr
#'
#' @return Data frame with ncol(df)+1 columns.
#' @export
SE_mutate <- function(col1, col2, new_col_name, df) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %<>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
return(df)
}
#' Automated standard evaluation of mutate with %in% operator.
#'
#' @param col1 col1 %in% col2
#' @param col2 col1 %in% col2
#' @param new_col_name Name of new column. Can be passed as variable.
#' @param df Data frame to append to.
#'
#' @import dplyr
#' @import lazyeval
#' @import magrittr
#'
#' @return Data frame with ncol(df)+1 columns.
#' @export
SE_mutate <- function(col1, col2, new_col_name, df) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %<>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
return(df)
}
strata <- SE_mutate(col1="rsid", col2="snp_b", new_col_name = "new2", df = strata)
#' Automated standard evaluation of mutate with %in% operator.
#'
#' @param col1 col1 %in% col2
#' @param col2 col1 %in% col2
#' @param new_col_name Name of new column. Can be passed as variable.
#' @param df Data frame to append to.
#'
#' @import dplyr
#' @import lazyeval
#' @import magrittr
#'
#' @return Data frame with ncol(df)+1 columns.
#' @export
SE_mutate <- function(col1, col2, new_col_name, df) {
mutate_call = lazyeval::interp(~ a %in% b, a = as.name(col1), b = as.name(col2))
df %<>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
return(df)
}
strata <- SE_mutate(col1="rsid", col2="snp_b", new_col_name = "new2", df = strata)
head(strata)
any(strata$new2)
document()
library(devtools)
document()
library(magrittr)
document()
document()
document()
document()
document()
document()
document()
document()
document()
remove.packages("coRge")
library(coRge)
document()
document()
library(coRge)
library(coRge)
interactive()
packageVersion("coRge")
paste0("hi \n hi")
document()
document()
library(coRge)
document()
library(devtools)
document()
ls()
?packageVersion
packageVersion(coRge)
packageVersion("coRge")
assign(3, "i", envir = .GlobalEnv)
assign("3", "i", envir = .GlobalEnv)
i
3
?assign
assign("3", "i", envir = .Globalenv)
assign("3", "i", envir = .GlobalEnv())
assign("3", "i", envir = .GlobalEnv
)
i
assign("3", "i", envir = globalenv())
i
rm(i)
i
assign("3", "i", envir = globalenv())
i
3
r <- TRUE
if (r) for(i in 1:2) {
if(r)  print(i)
if (r) }
if (r) for(i in 1:2) {
if (r)  print(i)
if (r) }
if(mode = "default")
if(mode == "default")
?system.file
system.file(package = "coRge", "bash", "sub.sh")
system.file(package = "coRge", "bash/sub.sh")
system.file(package = "coRge")
devtools::system.file(package = "coRge")
system.file(package = "coRge")
system.file(package = "coRge", "bash")
system.file(package = "coRge", "bash/sub.sh")
system.file(package = "coRge", "bash", "sub.sh")
system.file(package = "coRge", "bash",)
system.file(package = "coRge", "bash")
system.file(package = "coRge", "bash/sub.sh")
system.file(package = "coRge", "bash/submit.sh")
r <- read.table("data/test_run2.txt", h = T)
View(r)
library(ggvis)
install.packages("ggvis")
library(ggvis)
library(dplyr)
r %>% filter(k == "all") %>% ggvis(~factor(th), ~fdr) %>% layer_boxplots()
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots()
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots(, col = "red")
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots(., col = "red")
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots(., fill = "red")
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots(., fill := "red")
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots(., fill := "red") %>% layer_boxplots(~r$fdr, fill := "blue")
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots(., fill := "red") %>% layer_boxplots(~r$fdr[r$k == "all"], fill := "blue")
r %>% filter(k == "all") %>% ggvis(~factor(th), c(~sfdr, ~fdr)) %>% layer_boxplots(., fill := "red") %>%
layer_boxplots(., fill := "blue")
r %>% filter(k == "all") %>% ggvis(~factor(th), c(~sfdr, ~fdr)) %>% layer_boxplots(., fill := "red")
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots(., fill := "red")
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots(., fill := "blue")
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots()
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots() %>% layer_boxplots(data = r, x = "fdr", y = factor(th))
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots() %>% layer_boxplots(data = r, x = ~fdr, y = ~factor(th))
?layer_boxplots
layer_boxplots(data = r, x = ~th, y = ~fdr)
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots() %>% layer_boxplots(x = ~fdr, y = ~factor(th))
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots() %>% layer_boxplots(y = ~fdr, x = ~factor(th))
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots() %>% layer_boxplots(y = ~fdr, x = ~th)
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots() %>% layer_boxplots(y = ~fdr, x = ~factor(th))
r %>% filter(k == "all") %>% ggvis(~factor(th), ~sfdr) %>% layer_boxplots()
r$th <- as.factor(r$th)
r %>% filter(k == "all") %>% ggvis(th, ~sfdr) %>% layer_boxplots()
r %>% filter(k == "all") %>% ggvis(~th, ~sfdr) %>% layer_boxplots()
r %>% filter(k == "all") %>% ggvis(~th, ~sfdr) %>% layer_boxplots() %>% layer_boxplots(x = ~th, y = ~sfdr)
r %>% filter(k == "all") %>% ggvis(~th, ~sfdr) %>% layer_boxplots() %>% layer_boxplots(x = ~th, y = ~sfdr, add =T)
r %>% filter(k == "all") %>% ggvis(~th, ~sfdr) %>% layer_boxplots() %>% layer_boxplots(x = ~th, y = ~sfdr)
r %>% filter(k == "all") %>% ggvis(~th, ~sfdr) %>% layer_boxplots() %>% layer_boxplots(x = ~th, y = ~fdr)
r %>% filter(k == "all") %>% ggvis(~th, ~sfdr) %>% layer_boxplots() %>% layer_boxplots(x = ~th, y = ~sfdr)
r %>% filter(k == "all") %>% ggvis(~th, ~sfdr) %>% layer_boxplots() %>% layer_boxplots(x = ~th, y = ~fdr)
r %>% filter(k == "all")
r %>% filter(k == "all") %>% t.test(fdr, sfdr)
r %>% filter(k == "all") %>% t.test(.$fdr, .$sfdr)
r %>% filter(k == "all") %>% t.test(.$fdr, .[, sfdr])
r %>% filter(k == "all") %>% t.test(fdr, sfdr, data = .)
r %>% filter(k == "all") %>% t.test(fdr, sfdr, data = ., na.omit = TRUE)
r %>% filter(k == "all") %>% na.rm %>% t.test(fdr, sfdr, data = .)
r %>% filter(k == "all") %>% na.omit %>% t.test(fdr, sfdr, data = .)
t.test(fdr, sfdr, data = r[, k = "all"])
t.test(r$fdr[, k = "all"], r$sfdr[, k = "all"])
t.test(r$fdr[r$k = "all"], r$sfdr[r$k = "all"])
t.test(r$fdr[r$k == "all"], r$sfdr[r$k == "all"])
t.test(r$fdr[r$k == 1], r$sfdr[r$k == 1])
t.test(r$fdr[r$k == 2], r$sfdr[r$k == 2])
t.test(r$fdr[r$k == 3], r$sfdr[r$k == 3])
t.test(r$fdr[r$k == 4], r$sfdr[r$k == 4])
t.test(r$fdr[r$k == 4 & r$th == 0], r$sfdr[r$k == 4 & r$th == 0])
t.test(r$fdr[r$k == 4 & r$th == 0.2], r$sfdr[r$k == 4 & r$th == 0.2])
t.test(r$fdr[r$k == 4 & r$th == 0.4], r$sfdr[r$k == 4 & r$th == 0.4])
t.test(r$fdr[r$k == 4 & r$th == 0.6], r$sfdr[r$k == 4 & r$th == 0.6])
t.test(r$fdr[r$k == 4 & r$th == 0.8], r$sfdr[r$k == 4 & r$th == 0.8])
t.test(r$fdr[r$k == 4 & r$th == 0.9], r$sfdr[r$k == 4 & r$th == 0.9])
t.test(r$fdr[r$k == "all" & r$th == 0.9], r$sfdr[r$k == "all" & r$th == 0.9])
t.test(r$fdr[r$k == "all" & r$th == 0.2], r$sfdr[r$k == "all" & r$th == 0.2])
install.packages("tidyr")
library(tidyr)
r %>% gather(sfdr, fdr)
typeof(r$sfdr)
typeof(r$fdr)
r %>% spread(sfdr, fdr)
r %>% gather(sfdr, fdr)
?gather
mini_iris <- iris[c(1, 51, 101), ]
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
# same result but less verbose
r %>% gather(key = "s", value = "fdr" sfdr, fdr)
r %>% gather(key = "s", value = "fdr", sfdr, fdr)
r %>% gather(key = "s", value = "fdr", sfdr, fdr) -> r2
View(r2)
levels(r2$s)
r2$s <- as.factor(r2$s)
levels(r2$s)
r2$k <- as.factor(r2$k)
r2$k <- as.factor(r2$th)
r %>% gather(key = "s", value = "fdr", sfdr, fdr) -> r2
head(r2)
r2$k <- as.factor(r2$k)
r2$th <- as.factor(r2$th)
r2$s <- as.factor(r2$s)
lm(fdr ~ s + k + th, r2) %>% summary
head(ld)
r %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == "all") %>% filter(th == 0.2) %>% ehad
r %>% filter(k == "all") %>% filter(th == 0.2) %>% head
r %>% filter(k == "all") %>% filter(th == 0.2) %>% nrow
r %>% filter(k == "all") %>% filter(th == 0.2) %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == "all") %>% filter(th == 0.4) %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == "all") %>% filter(th == 0.6) %>% select(fdr, sfdr) %>% t.test
r <- fread("~/repos/coR-ge/data/test_run2.txt", h = T)
r <- fread("~/repos/coR-ge/data/test_run2.txt", h = T)
library(data.table)
r <- fread("~/repos/coR-ge/data/test_run2.txt", h = T)
r %>% filter(k == "all") %>% filter(th == 0.6) %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == "all") %>% filter(th == 0.8) %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == "all") %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == ) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == 1) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == 2) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == 3) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test
r %>% filter(k == 3) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test(.[,1], .[, 2])
r %>% filter(k == 3) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test(.$fdr, .$sfdr)
r %>% filter(k == 3) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test(.$fdr, .$sfdr, alterntive = "greater")
?t.test
r %>% filter(k == 3) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test(x = .$fdr, y = .$sfdr, alterntive = "two.sided")
r %>% filter(k == 3) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test(x = fdr, y = sfdr, alterntive = "two.sided")
r %>% filter(k == 3) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test(data = ., x = fdr, y = sfdr, alterntive = "two.sided")
r %>% filter(k == 3) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% filter(!is.na(sfdr)) %>% filter(!is.na(fdr)) %>% t.test(data = ., x = fdr, y = sfdr, alterntive = "two.sided")
r %>% filter(k == 3) %>% filter(th == 0.9) %>% select(fdr, sfdr) %>% t.test(fdr ~ sfdr, data = .)
r2 %>% filter(k == 3) %>% filter(th == 0.9) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == "all") %>% filter(th == 0.2) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == "all") %>% filter(th == 0.4) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == "all") %>% filter(th == 0.6) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == "all") %>% filter(th == 0.8) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == "all") %>% filter(th == 0.9) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == "all") %>% filter(th == 0) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 1) %>% filter(th == 0) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 2) %>% filter(th == 0) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 3) %>% filter(th == 0) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 4) %>% filter(th == 0) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 1) %>% filter(th == 0.2) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 1) %>% filter(th == 0.4) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 1) %>% filter(th == 0.6) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 1) %>% filter(th == 0.8) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 1) %>% filter(th == 0.9) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 3) %>% filter(th == 0.9) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 3) %>% filter(th == 0.8) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 3) %>% filter(th == 0.6) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 3) %>% filter(th == 0.4) %>% t.test(fdr ~ s, data = .)
r2 %>% filter(k == 3) %>% filter(th == 0.2) %>% t.test(fdr ~ s, data = .)
r2 %>% group_by(s) %>% ggvis(~fdr, ~th) %>% layer_boxplot()
r2 %>% group_by(s) %>% ggvis(~fdr, ~th) %>% layer_boxplots
r2 %>% group_by(s) %>% ggvis(~th, ~fdr) %>% layer_boxplots
r2 %>% group_by(s) %>% ggvis(~th, ~fdr) %>% layer_boxplots(na.rm = TRUE)
r2 %>% group_by(s) %>% ggvis(~th, ~fdr, na.rm = TRUE) %>% layer_boxplots()
r2 %>% group_by(s,  na.rm = TRUE) %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r2 %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r2 %>% group_by(s,  na.rm = TRUE) %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r2 %>% group_by(s) %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r2 %>% group_by(s) %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r2  %>% filter(!is.na(fdr))
r2  %>% filter(!is.na(fdr)) -> r3
r3 %>% group_by(s) %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r3 %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r3 %>% ggvis(~th, ~fdr) %>% group_by(s) %>% layer_boxplots()
r3 %>% ggvis(~th, ~fdr) %>% auto_group %>% layer_boxplots()
r3 %>% ggvis(~th, ~fdr, stroke = ~s) %>% auto_group %>% layer_boxplots()
head(r3)
r3 %>% ggvis(~th, ~fdr, stroke = ~s) %>% layer_boxplots()
r3 %>% ggvis(~th, ~fdr, stroke = ~s) %>% layer_boxplots()
head(r3$head)
head(r3$s)
r3$s <- as.character(r3$s)
r3 %>% ggvis(~th, ~fdr, stroke = ~s) %>% layer_boxplots()
r3 %>% ggvis(~th, ~fdr, fill = ~s) %>% layer_boxplots()
r3 %>% ggvis(~s, ~fdr) %>% layer_boxplots()
r3 %>% ggvis(~th, ~fdr, fill = ~s) %>% layer_boxplots()
r3 %>% ggvis(~th, ~fdr) %>% layer_bars()
r3 %>% ggvis(~th, ~fdr) %>% group_by(s) %>% layer_bars()
r3 %>% ggvis(~th, ~fdr, fill = ~s) %>% group_by(s) %>% layer_bars()
r3 %>% ggvis(~th, ~fdr, fill = ~s) %>% group_by(s) %>% layer_densities()
r3 %>% ggvis(~th, ~fdr, fill = ~s) %>% group_by(s) %>% layer_guess()
r3 %>% ggvis(~th, ~fdr, fill = ~s) %>% group_by(s) %>% layer_histograms()
r3 %>% ggvis(~fdr, fill = ~s) %>% group_by(s) %>% layer_histograms()
r3 %>% ggvis(~fdr, fill = ~s) %>% group_by(s, th) %>% layer_histograms()
r3 %>% ggvis(~fdr, fill = ~s) %>% group_by(s, th) %>% layer_bars(stack = F)
r3 %>% ggvis(~fdr, fill = ~s) %>% group_by(s) %>% layer_bars(stack = F)
r3 %>% ggvis(~th, ~fdr, fill = ~s) %>% group_by(s) %>% layer_bars(stack = F)
r3 %>% ggvis(~th, ~fdr, fill = ~s) %>% group_by(s) %>% layer_bars(stack = F)
?layer_bars
r3 %>% ggvis(~th, ~fdr, fill = ~s)  %>% layer_bars(stack = F)
r3 %>% ggvis(~th, ~fdr, fill = ~s)  %>% auto_group %>% layer_bars(stack = F)
r3 %>% ggvis(~th, ~fdr, fill = ~s)  %>% auto_group %>% layer_bars(stack = T)
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
ggplot(r3, aes(th, fill = s)) + geom_bar(position = "dodge")
library(ggplot2)
ggplot(r3, aes(th, fill = s)) + geom_bar(position = "dodge")
ggplot(r3, aes(fdr, th, fill = s)) + geom_bar(position = "dodge")
ggplot(r3, aes(th, fill = s)) + geom_bar(position = "dodge")
ggplot(r3, aes(fdr, th, fill = s), stat = "identity") + geom_bar(position = "dodge")
ggplot(r3, aes(fdr, th, fill = s)) + geom_bar(position = "dodge", stat = "identity")
ggplot(r3, aes(th, fdr, fill = s)) + geom_bar(position = "dodge", stat = "identity")
ggplot(r3, aes(th, fdr, fill = s)) + geom_bar(position = "dodge", stat = "mean")
meanprice <- tapply(r3$fdr, r3$th, mean)
cut <- factor(levels(diamonds$th), levels = levels(diamonds$th))
qplot(cut, meanprice)
meanprice
head(r3)
meanprice <- tapply(r3$fdr, r3$th, mean)
cut <- factor(levels(r3$th), levels = levels(r3$th))
qplot(cut, meanprice)
meanprice <- tapply(r3$fdr, r3$th, mean)
cut <- factor(levels(r3$th), levels = levels(r3$th))
qplot(cut, meanprice, geom = "bar")
meanprice <- tapply(r3$fdr, r3$th, mean)
cut <- factor(levels(r3$th), levels = levels(r3$th))
qplot(cut, meanprice)
meanprice <- tapply(r3$fdr, r3$th, mean)
cut <- factor(levels(r3$th), levels = levels(r3$th))
qplot(cut, meanprice, geom="bar", stat="identity")
meanprice <- tapply(r3$fdr, r3$th, mean)
cut <- factor(levels(r3$th), levels = levels(r3$th))
qplot(cut, meanprice, geom="bar", stat="identity")
?qplot
meanprice <- tapply(r3$fdr, r3$th, mean)
cut <- factor(levels(r3$th), levels = levels(r3$th))
qplot(cut, meanprice, geom="bar")
meanprice <- tapply(r3$fdr, r3$th, mean)
cut <- factor(levels(r3$th), levels = levels(r3$th))
qplot(cut, meanprice, geom="hist")
meanprice <- tapply(r3$fdr, r3$th, mean)
cut <- factor(levels(r3$th), levels = levels(r3$th))
qplot(cut, meanprice, geom="bar")
ggplot(cut, meanprice) + geom_bar(position = "dodge", stat = "identity")
ggplot(r3, aes(th, fdr, fill = s)) + geom_bar(position = "dodge", stat = "mean")
ggplot(cut, meanprice) + geom_bar(position = "dodge", stat = "identity")
ggplot(aes(cut, meanprice))+ geom_bar(position = "dodge", stat = "identity")
ggplot(aes(cut, meanprice))
ggplot(aes(cut, meanprice))
cut
ggplot(aes(cut, meanprice))+ geom_bar(stat = "identity")
ggplot(aes(cut, meanprice))+ geom_bar(stat = "identity")
meanprice
cut
ggplot(aes(cut, meanprice))+ geom_bar(stat = "ide)
means<-aggregate(r3,by=list(r3$s, r3$th),mean)
warnings()
nrow(r3)
r2 %>% ggvis(~fdr, ~th) %>% geom_boxplots
library(ggvis)
r2 %>% ggvis(~fdr, ~th) %>% geom_boxplots
r2 %>% ggvis(~fdr, ~th) %>% geom_boxplot
r2 %>% ggvis(~fdr, ~th) %>% layer_boxplots()
r2 %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r3 %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r3 %>% filter(s == "fdr") %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r3 %>% filter(s == "sfdr") %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r3 %>% filter(s == "sfdr") %>% ggvis(~th, ~fdr) %>% layer_boxplots() %>% main("sfdr")
r3 %>% filter(s == "fdr") %>% ggvis(~th, ~fdr) %>% layer_boxplots()
r3 %>% filter(s == "fdr") %>% ggvis(~th, ~fdr) %>% layer_boxplots() + add_axis("x", "sfdr")
r3 %>% filter(s == "fdr") %>% ggvis(~th, ~fdr) %>% layer_boxplots() + add_axis("x", title="sfdr")
r3 %>% filter(s == "fdr") %>% ggvis(~th, ~fdr) %>% layer_boxplots() %>% add_axis("x", title="sfdr")
e <- na.omit(r2)
identical(e, r3)
e <- na.rm(r2)
