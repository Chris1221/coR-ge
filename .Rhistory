sh <- system.file("bash", "sub.sh")
system(paste0("qsub -N ", i, " ", j, " ", sh, " ", i, " ", j))
message(paste0("Submitted i = ", i, " j = ", j))
}
}
}
document()
document()
document()
document()
ls()
library(coRge)
?fake.snps
?analyze
?coRge
if(!require(devtools)) install.packages("devtools")
devtools::install_github("Chris1221/coR-ge")
?merge
colnames(summary)
r <- data.frame(a = 4, b = 10)
r2<- data.frame(a=4, c = 12)
r2<- data.frame(c=4, d = 12)
merge(r, r2, by.x = "a", by.y = "c")
summary %>% sum(.$k)
sum(summary$k)
summary %>% sum(.$k) -> r
r
?fdr
h1_summary
summary
h0_summary
h0_summary$P <- 0.03
h0_summary$p.adj <- 0.03
sum(h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(df$h1)])
h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(df$h1)]
h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(h0_summary$h1)]
h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(h0_summary$h1)] %>% nrow
h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(h0_summary$h1)] %>% length
nrow(h0_summary)
library(coRge)
document()
library(devtools)
document()
document()
group = TRUE
if(!group) print("hi")
if(group) print("hi")
colnames(summary)
group_name <- "k"
summary %>% filter(get(group_name) == 1)
library(dplyr)
summary %>% filter(get(group_name) == 1)
summary %>% filter(eval(group_name) == 1)
summary %>% filter(print(group_name) == 1)
summary %>% filter(paste(group_name) == 1)
summary %>% filter(get(group_name, envir = as.environment(summary)) == 1)
summary %>% filter_(get(group_name, envir = as.environment(summary)) == 1)
summary %>% filter_(group_name == 1)
summary %>% filter_(as.name(group_name) == 1)
summary %>% filter(as.name(group_name) == 1)
summary %>% filter(get(group_name, envir = as.environment(summary)))
summary %>% select(get(group_name, envir = as.environment(summary)))
get(group_name, envir = as.environment(summary))
as.name(group_name)
summary %>% select_(get(group_name, envir = as.environment(summary)))
summary %>% filter(paste0(group_name, "==", i))
summary %>% filter_(paste0(group_name, "==", i))
summary %>% filter_(.,paste0(group_name, "==", i))
i
filter(summary, paste0(group_name, "==", i))
filter(summary, paste(group_name, "==", i))
filter(summary, paste(group_name, "== 4"))
filter_(summary, paste(group_name, "== 4"))
filter_(summary, paste(group_name, "==", i))
?filter_
summary %>% filter_("k == 4")
library(dplyr)
summary %>% filter_("k == 4")
remove.packages("dplyr")
install_github("hadley/dplyr")
summary %>% filter_("k == 1")
summary %>% filter_(paste(group_name, "==", i))
strata
head(strata)
fdr()
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata$P <- 0.03
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
s1
r <- data.frame(sfdr = double(), fdr = double(), k = integer())
r
i <- 1
out <- data.frame(sfdr = double(), fdr = double(), k = integer())
for(i in max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i,] <- c(sfdr, fdr, i)
}
out <- data.frame(sfdr = double(), fdr = double(), k = integer())
for(i in max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i,] <- c(sfdr, fdr, i)
}
out
out <- data.frame(sfdr = double(), fdr = double(), k = integer())
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i,] <- c(sfdr, fdr, i)
}
out
#' Correct strata
#'
#' @param strata Strata
#' @param n_strata Number of strata
#' @param assoc Assoc file path
#'
#' @export
correct <- function(strata = NULL, n_strata = NULL, assoc = NULL, group = FALSE, group_name = NULL){
if(group && is.null(group_name)) stop("Please name your group")
out <- data.frame(sfdr = double(), fdr = double(), k = integer())
assoc.df <- fread(assoc, h = T)
strata %<>%
merge(assoc.df, by.x = "rsid", by.y = "SNP")
message("Calculating sFDR and FDR")
strata %>%
filter(s == 1) %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter(s == 2) %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
s2
strata %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[1,] <- c(sfdr, fdr, "all")
if(group) {
assoc.df <- fread(assoc, h = T)
strata %<>%
merge(assoc.df, by.x = "rsid", by.y = "SNP")
message("Calculating sFDR and FDR")
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
return(out)
}
}
out <- data.frame(sfdr = double(), fdr = double(), k = integer())
message("Calculating sFDR and FDR")
strata %>%
filter(s == 1) %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter(s == 2) %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
s2
strata %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[1,] <- c(sfdr, fdr, "all")
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
return(out)
message("Calculating sFDR and FDR")
strata %>%
filter(s == 1) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter(s == 2) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[1,] <- c(sfdr, fdr, "all")
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
return(out)
}
}
strata %>%
filter(s == 1) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter(s == 2) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[1,] <- c(sfdr, fdr, "all")
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
return(out)
}
strata %>%
filter(s == 1) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter(s == 2) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[1,] <- c(sfdr, fdr, "all")
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
out
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
}
return(out)
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
}
print(out)
document()
document()
use_vignette("my-vignette")
library(coRge)
document()
use_vignette("vignettes/coRge.Rmd")
use_vignette("coRge.Rmd")
?use_vignette
vignette()
vignette("coRge")
vignette("coR-ge")
vignette("coRge")
?vignette
vignette(package = "coR-ge")
vignette(package = "coRge")
build_vignettes()
build_vignettes()
document()
library(coRge)
build_vignettes()
library(coRge)
install_github("Rdatatable/data.table")
results <- src_sqlite("result.sqlite3", create = T)
results <- src_sqlite("data/result.sqlite3", create = T)
out
out_sqlite <- copy_to(results, test, temporary = FALSE, indexes = list("sfdr", "fdr", "k"))
out_sqlite <- copy_to(results, test, temporary = FALSE, indexes = list("sfdr", "fdr", "k"))
out
typeof(out)
out_sqlite <- copy_to(results, out, temporary = FALSE, indexes = list("sfdr", "fdr", "k"))
output <- "test.txt"
write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)
write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)
if(file.exists(output)) write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)
else write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)
else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) suppressWarnings(write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) suppressWarnings(write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) suppressWarnings(write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
document()
document()
library(coRge)
system.file("bash", "hapgen.sh")
?system.file
system.file("bash", "hapgen.sh", package = "coRge")
system.file(package = "coRge")
system.file("bash/hapgen.sh",package = "coRge")
system.file("bash", "khapgen.sh",package = "coRge")
system.file("bash", "k_hapgen.sh",package = "coRge")
system.file("bash", "k_hapgen.sh",package = "coRge") -> k_hapgen
paste0("qsub -N k_jobs_", i, "_", j, " ", k_hapgen, " ", i, " ", j)
combR <- as.data.frame(foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"] })
WAS <- rowSums(combR)
samp$Z <- as.character(foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55)))
?sink
sink("test.txt")
cat("hi")
sink()
from <- "<chri.c.1221@gmail.com>"
to <- "<chris.c.1221@gmail.com"
to <- "<chris.c.1221@gmail.com>"
from <- "<chris.c.1221@gmail.com>"
subject <- "Done"
body <- "done"
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
control=list(smtpServer="ASPMX.L.GOOGLE.COM")
install.packages("sendmailR")
library(sendmailR)
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
sendmail(from=from,to=to,subject=subject,msg=body,control=control)
?sink
