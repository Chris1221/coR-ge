Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
.snps <- as.data.frame(.snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*.snps[i,"all_maf"]*(1-.snps[i,"all_maf"])))
}
message("Done!")
return(b)
}
phen()
for(i in 1:nrow(combR)){
for(j in 1:ncol(combR)){
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
}
b <- phen()
for(i in 1:nrow(combR)){
for(j in 1:ncol(combR)){
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
}
b[1]
ncol(combR)
snps
for(i in 1:nrow(combR)){
for(j in 1:ncol(combR)){
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
}
comb[1,2]
comb[1,2]*b[2]
comb[1,2]*b[2] - b[2]*snps[j, "all_maf"]
comb[1,2]*b[2] - b[2]
*snps[j, "all_maf"]
snps[j, "all_maf"]
is.data.table(snps)
snps <- as.data.frame(snps)
for(i in 1:nrow(combR)){
for(j in 1:ncol(combR)){
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
}
foreach(i = 1:nrow(combR)) %:% foreach(j = 1:ncol(combR)) %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
?foreach
foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR)) %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
r <- foreach(i = 1:nrow(combR), .combine = ) %:% foreach(j = 1:ncol(combR)) %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
r <- as.data.frame(r)
View(r)
r <- foreach(i = 1:nrow(combR), .combine = 'rbind' ) %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
View(r)
r2 <- as.data.frame(r)
View(r2)
View(combR)
combR <- gen2r(genfile = comb, local = TRUE)
View(combR)
any(combR != 0)
WAS <- rowSums(combR)
Z <- vector()
Z <- foreach(i = 1:length(WAS), .combine = 'c') WAS[i] + rnorm(1, 0, sd = sqrt(0.55))
Z <- foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55))
Z
samp$Z <- as.character(foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55)))
?assign
#' Phenotype Calculation
#'
#' @param .snps SNPs matrix
#' @param .combR combR matrix
#'
#' @export
phen <- function(.snps = snps, .combR = combR){
message("Calculating phenotypes...")
nr = nrow(.combR)
nc = ncol(.combR)
if(!exists("nr")) stop("Something went wrong, check the .combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(.combR) <- samp$ID_1
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
.snps <- as.data.frame(.snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*.snps[i,"all_maf"]*(1-.snps[i,"all_maf"])))
}
message("Done!")
return(b)
assign("samp", samp, env = globalenv())
}
combR <- gen2r(genfile = comb, local = TRUE)
b <- phen()
combR <- as.data.frame(foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"] })
WAS <- rowSums(combR)
samp$Z <- as.character(foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55)))
var <- data.frame(0, 0, 0, "C")
samp$Z <- as.character(samp$Z)
colnames(var) <- colnames(samp)
samp <- rbind(var, samp)
samp
#' Phenotype Calculation
#'
#' @param .snps SNPs matrix
#' @param .combR combR matrix
#'
#' @export
phen <- function(.snps = snps, .combR = combR){
message("Calculating phenotypes...")
nr = nrow(.combR)
nc = ncol(.combR)
if(!exists("nr")) stop("Something went wrong, check the .combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(.combR) <- samp$ID_1
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
.snps <- as.data.frame(.snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*.snps[i,"all_maf"]*(1-.snps[i,"all_maf"])))
}
message("Done!")
assign("samp", samp, env = globalenv())
return(b)
}
phen()
samp
combR <- gen2r(genfile = comb, local = TRUE)
b <- phen()
combR <- as.data.frame(foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"] })
WAS <- rowSums(combR)
samp$Z <- as.character(foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55)))
var <- data.frame(0, 0, 0, "C")
samp$Z <- as.character(samp$Z)
colnames(var) <- colnames(samp)
samp <- rbind(var, samp)
?fwrite
fwrite()
?fwrite()
??fwrite()
install_github("Rdatatable/data.table")
library(devtools)
install_github("Rdatatable/data.table")
library(data.table)
fwrite
fread
fread()
install.packages("data.table")
library(data.table)
remove.packages("data.table")
install_github("Rdatatable/data.table")
library(data.table)
package.remove("data.table")
remove.packages("data.table")
install.packages("data.table")
library(data.table)
R.Version()
remove.packages("gbm"); install.packages("gbm"); library(gbm)
install_github("Chris1221/mineR")
library(devtools)
install_github("Chris1221/mineR")
colnames(snps)
k <- c(1,2,3,4)
for k {}
for(k){
print(k)
}
for(.k in k) print (k)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("Chris1221/coR-ge")
a ->
b
3 ->
b
b
summary
head(summar)
head(summary)
let vimrplugin_assign = 0
source("R/fake.snps.R")
source("R/fake.snps.R")
fake.snps(summary = summary, n = 3000, group = c(1,2,3,4))
fake_snps <- list()
group <- c(1,2,3,4)
i <- 1
summary %>%
filter(k == i) %>%
sample_n(n) %>%
select(rsid) %>%
as.vector ->
fake_snps[[i]]
summary %>%
filter(k == i) %>%
sample_n(3000)
summary %>% filter(k == i)
summary %>% filter(k = i)
colnames(summary)
summary <- read.table("inst/extdata/summary.out")
summary <- fread("inst/extdata/summary.out", h = T, sep = " ")
library(data.table)
summary <- fread("inst/extdata/summary.out", h = T, sep = " ")
colnames(summary)
summary %>% filter(k = i)
summary %>% filter(k = i) %>% nrow
summary %>% filter(k == i) %>% nrow
summary %>%
filter(k == i) %>%
sample_n(n) %>%
select(rsid) %>%
as.vector ->
fake_snps[[i]]
summary %>%
filter(k == i) %>%
sample_n(n) %>%
select(rsid)
n <- 3000
summary %>%
filter(k == i) %>%
sample_n(n) %>%
select(rsid)
summary %>%
filter(k == i) %>%
sample_n(n) %>%
select(rsid) %>%
as.vector ->
fake_snps[[i]]
if(!is.null(group)){
for(i in group){
summary %>%
filter(k == i) %>%
sample_n(n) %>%
select(rsid) %>%
as.vector ->
fake_snps[[i]]
}
}
fake_snps
fake_snps(summary = summary, n = 3000, group = k)
fake.snps(summary = summary, group = k)
fake_snps[]
fake_snps["real"] <- real_snps
real_snps <- snps$rsid
fake_snps["real"] <- real_snps
fake_snps[["real"]] <- real_snps
fake_snps
fake_snps[["real"]] <- as.vector(real_snps)
fake_snps
real_snps
snps %>% select(rsid) %>% as.vector -> fake_snps[["real"]]
fake_snps
head(fake_snps)
fake_snps[[1]]
fake_snps[[3]]
fake_snps[[4]]
fake_snps[["real"]]
snp_list <- fake.snps(summary=summary, n=3000, group=k)
snps %>% select(rsid) %>% as.vector -> snp_list[["real"]]
snps %>% select(rsid) %>% as.vector -> fake_snps[["real"]]
snp_list <- fake.snps(summary=summary, n=3000, group=k)
snps %>% select(rsid) %>% as.vector -> snp_list[["real"]]
snp_list
a <- NULL
b <- 2
any(is.null(c(a,b)))
summary %>% filtere(rsid %in% snp_list)
summary %>% filter(rsid %in% snp_list)
summary %>% filter(rsid !%in% snp_list)
summary %>% filter(rsid %in% snp_list)
summary %>% filter(rsid %in% snp_list[[1]])
summary$rsid
summary %>% filter(rsid %in% unlist(snp_list[[1]]))
summary %>% filter(rsid !%in% unlist(snp_list[[1]]))
summary %>% filter(!(rsid %in% unlist(snp_list[[1]])))
summary %>% filter(!(rsid %in% unlist(snp_list[[1]])))
snp_list[[1,2]]
snp_list[[c(1,2)]]
summary %>% filter(!(rsid %in% unlist(snp_list)))
unlist(snp_list)
unlist(snp_list) %>% nrow
unlist(snp_list) %>% length
summary %<>% filter(!(rsid %in% unlist(snp_list)))
library(magrittr)
summary %<>% filter(!(rsid %in% unlist(snp_list)))
length(summary)
nrow(summary)
nrow(summary)/2
floor(nrow(summary)/2)
s1 <- summary %>% sample_n(10)
s1
snps %>% select(rsid) %>% as.vector -> snp_list
snpsnp_list
snp_list
snp_list %>% unlist()
summary %>% filter(!(rsid %in% unlist(snp_list)))
summary %>% filter(!(rsid %in% unlist(snp_list))) %>% nrow()
summary %>% nrow
p <- 0.4
p
p * nrow(summary)
summary %>% sample_n( floor( nrow( summary)*p) - length(snp_list))
summary %>% mutate(s = 2, h1 = F)
summary
summary$s
summary %>% mutate(s = 2, h1 = F)
summary %>% mutate(s = 2, h1 = F) -> r
r
summary
summary %>% mutate(h1 = TRUE)
library(dplyr)
summary %>% mutate(h1 = TRUE)
summary %>% mutate(h1 = TRUE) -> r
r
typeof(r)
print(r)
head(r)
nrow(r)
#' Create strata
#'
#' Currently only set up to handle two stata for arbitrary p in [0,1].
#'
#' @param snp_list Vector of true SNPs
#' @param summary Full summmary sheet
#' @param p Proportion in strata 1
#' @param n_strata Number of strata. Currently only supports 2.
#'
#' @export
stratify <- function(snp_list = NULL, summary = NULL, p = NULL, n_strata = NULL){
library(magrittr)
if(any(c(is.null(snp_list), is.null(summary), is.null(p), is.null(n_strata)))) stop("Missing a required input arguement")
# Only look at the ones not selected to be either real or fake
summary %>% filter(!(rsid %in% unlist(snp_list))) %>% mutate(h1 = F) ->
h0_summary
summary %>% filter(rsid %in% unlist(snp_list)) %>% mutate(h1 = T) ->
h1_summary
s1 <- summary %>% sample_n(floor(nrow(h0_summary)*p) - length(snp_list))
s1 %<>% rbind(h1_summary) %>% mutate(s = 1)
s2 <- summary %>% filter(!(rsid %in% s1$rsid)) %>% mutate(s = 2, h1 = F)
strata <- rbind(s1, s2)
return(strata)
}
snp_list
stratify(snp_list = snp_list, summary = summary, p = 0.5, n_strata = 2)
p = 0.5
n_strata = 2
if(any(c(is.null(snp_list), is.null(summary), is.null(p), is.null(n_strata)))) stop("Missing a required input arguement")
# Only look at the ones not selected to be either real or fake
summary %>% filter(!(rsid %in% unlist(snp_list))) %>% mutate(h1 = F) ->
h0_summary
# Only look at the ones not selected to be either real or fake
summary %>% filter(!(rsid %in% unlist(snp_list))) %>% mutate(h1 = F) ->
h0_summary
summary %>% filter(rsid %in% unlist(snp_list)) %>% mutate(h1 = T) ->
h1_summary
s1 <- summary %>% sample_n(floor(nrow(h0_summary)*p) - length(snp_list))
s1 %<>% rbind(h1_summary) %>% mutate(s = 1)
s2 <- summary %>% filter(!(rsid %in% s1$rsid)) %>% mutate(s = 2, h1 = F)
strata <- rbind(s1, s2)
s1 %>% rbind(., h1_summary)
colnames(s1)
colnames(h1_summary)
s1 <- h0_summary %>% sample_n(floor(nrow(h0_summary)*p) - length(snp_list))
s1 %<>% rbind(h1_summary) %>% mutate(s = 1)
s1 <- h0_summary %>% sample_n(floor(nrow(h0_summary)*p) - length(snp_list))
s1 %<>% rbind(h1_summary) %>% mutate(s = 1)
s2 <- summary %>% filter(!(rsid %in% s1$rsid)) %>% mutate(s = 2, h1 = F)
strata <- rbind(s1, s2)
nrow(strata)
nrow(summary)
summary <- fread("inst/extdata/summary.out", h = T, sep = " ")
#' Create strata
#'
#' Currently only set up to handle two stata for arbitrary p in [0,1].
#'
#' @param snp_list Vector of true SNPs
#' @param summary Full summmary sheet
#' @param p Proportion in strata 1
#' @param n_strata Number of strata. Currently only supports 2.
#'
#' @export
stratify <- function(snp_list = NULL, summary = NULL, p = NULL, n_strata = NULL){
library(magrittr)
if(any(c(is.null(snp_list), is.null(summary), is.null(p), is.null(n_strata)))) stop("Missing a required input arguement")
# Only look at the ones not selected to be either real or fake
summary %>% filter(!(rsid %in% unlist(snp_list))) %>% mutate(h1 = F) ->
h0_summary
summary %>% filter(rsid %in% unlist(snp_list)) %>% mutate(h1 = T) ->
h1_summary
s1 <- h0_summary %>% sample_n(floor(nrow(h0_summary)*p) - length(snp_list))
s1 %<>% rbind(h1_summary) %>% mutate(s = 1)
s2 <- summary %>% filter(!(rsid %in% s1$rsid)) %>% mutate(s = 2, h1 = F)
strata <- rbind(s1, s2)
return(strata)
}
stratify(snp_list = snp_list, summary = summary, p = 0.5, n_strata = 2)
stratify(snp_list = snp_list, summary = summary, p = 0.5, n_strata = 2) -> strata
nrow(strata)
nrow(summary)
View(strata)
colnames(gen) <- paste0("V",1:ncol(gen))
summary <- fread(summary.file, h = T, sep = " ")
message("Selecting Causal SNPs")
snps <- causal.snps(summary = summary)
colnames(snps)[3] <- "V3"
message("Merging together and converting from Oxford to R format...")
comb <- as.data.frame(merge(gen, snps, by = "V3"))
comb$rsid <- NULL
comb$chromosome <- NULL
comb$all_maf <- NULL
comb$k <- NULL
combR <- gen2r(genfile = comb, local = TRUE)
b <- phen()
combR <- as.data.frame(foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"] })
WAS <- rowSums(combR)
samp$Z <- as.character(foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55)))
var <- data.frame(0, 0, 0, "C")
samp$Z <- as.character(samp$Z)
colnames(var) <- colnames(samp)
samp <- rbind(var, samp)
message("Writing out temp files")
#' Submission Convenience function
#'
#' @param n Number of jobs to submit. Defaults
#'
#' @return Nothing. Submits directly to QSUB; check with qstat.
#'
#' @export
sub <- function(n = NULL){
if (is.null(n)) stop("Give a value for n")
for(i in 1:n){
for(j in 1:n){
sh <- system.file("bash", "sub.sh")
system(paste0("qsub -N ", i, " ", j, " ", sh, " ", i, " ", j))
message(paste0("Submitted i = ", i, " j = ", j))
}
}
}
document()
document()
document()
document()
ls()
library(coRge)
?fake.snps
?analyze
?coRge
if(!require(devtools)) install.packages("devtools")
devtools::install_github("Chris1221/coR-ge")
?merge
colnames(summary)
r <- data.frame(a = 4, b = 10)
r2<- data.frame(a=4, c = 12)
r2<- data.frame(c=4, d = 12)
merge(r, r2, by.x = "a", by.y = "c")
summary %>% sum(.$k)
sum(summary$k)
summary %>% sum(.$k) -> r
r
?fdr
h1_summary
summary
h0_summary
h0_summary$P <- 0.03
h0_summary$p.adj <- 0.03
sum(h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(df$h1)])
h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(df$h1)]
h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(h0_summary$h1)]
h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(h0_summary$h1)] %>% nrow
h0_summary$p.adj[h0_summary$p.adj < 0.05 && !(h0_summary$h1)] %>% length
nrow(h0_summary)
library(coRge)
document()
