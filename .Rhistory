s1
strata %>%
filter(s == 2) %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
s2
strata %>%
mutate(p.adj = p.adj(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[1,] <- c(sfdr, fdr, "all")
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
return(out)
message("Calculating sFDR and FDR")
strata %>%
filter(s == 1) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter(s == 2) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[1,] <- c(sfdr, fdr, "all")
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
return(out)
}
}
strata %>%
filter(s == 1) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter(s == 2) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[1,] <- c(sfdr, fdr, "all")
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
return(out)
}
strata %>%
filter(s == 1) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter(s == 2) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[1,] <- c(sfdr, fdr, "all")
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
out
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
}
return(out)
if(group) {
for(i in 1:max(strata[, group_name])){
strata %>%
filter_("s == 1", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s1
strata %>%
filter_("s == 2", paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
s2
strata %>%
filter_(paste(group_name, "==", i)) %>%
mutate(p.adj = p.adjust(P, method = "BH")) %>%
fdr ->
agg
sfdr <- (s1[1]+s2[1]) / (s1[1]+s2[1] + s1[2]+s2[2])
fdr <- agg[3]
out[i+1,] <- c(sfdr, fdr, i)
}
}
print(out)
document()
document()
use_vignette("my-vignette")
library(coRge)
document()
use_vignette("vignettes/coRge.Rmd")
use_vignette("coRge.Rmd")
?use_vignette
vignette()
vignette("coRge")
vignette("coR-ge")
vignette("coRge")
?vignette
vignette(package = "coR-ge")
vignette(package = "coRge")
build_vignettes()
build_vignettes()
document()
library(coRge)
build_vignettes()
library(coRge)
install_github("Rdatatable/data.table")
results <- src_sqlite("result.sqlite3", create = T)
results <- src_sqlite("data/result.sqlite3", create = T)
out
out_sqlite <- copy_to(results, test, temporary = FALSE, indexes = list("sfdr", "fdr", "k"))
out_sqlite <- copy_to(results, test, temporary = FALSE, indexes = list("sfdr", "fdr", "k"))
out
typeof(out)
out_sqlite <- copy_to(results, out, temporary = FALSE, indexes = list("sfdr", "fdr", "k"))
output <- "test.txt"
write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)
write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)
if(file.exists(output)) write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)
else write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)
else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) suppressWarnings(write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) suppressWarnings(write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
if(!file.exists(output)) suppressWarnings(write.table(out, output, row.names = F, col.names = TRUE, quote = F, append = T)) else if(file.exists(output)) write.table(out, output, row.names = F, col.names = F, quote = F, append = T)
document()
document()
library(coRge)
system.file("bash", "hapgen.sh")
?system.file
system.file("bash", "hapgen.sh", package = "coRge")
system.file(package = "coRge")
system.file("bash/hapgen.sh",package = "coRge")
system.file("bash", "khapgen.sh",package = "coRge")
system.file("bash", "k_hapgen.sh",package = "coRge")
system.file("bash", "k_hapgen.sh",package = "coRge") -> k_hapgen
paste0("qsub -N k_jobs_", i, "_", j, " ", k_hapgen, " ", i, " ", j)
combR <- as.data.frame(foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"] })
WAS <- rowSums(combR)
samp$Z <- as.character(foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55)))
?sink
sink("test.txt")
cat("hi")
sink()
from <- "<chri.c.1221@gmail.com>"
to <- "<chris.c.1221@gmail.com"
to <- "<chris.c.1221@gmail.com>"
from <- "<chris.c.1221@gmail.com>"
subject <- "Done"
body <- "done"
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
control=list(smtpServer="ASPMX.L.GOOGLE.COM")
install.packages("sendmailR")
library(sendmailR)
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
sendmail(from=from,to=to,subject=subject,msg=body,control=control)
?sink
library(devtools)
install_github("Chris1221/mineR")
install_github("Chris1221/coR-ge")
library(data.table)
remove.packages("data.table")
install.packages("data.table")
library(data.table)
?library
fread()
remove.packages("data.table")
packrat::snapshot(prompt = FALSE)
library(packrat)
install.packages("data.table")
library(data.table)
install_github("Rdatatable/data.table")
library(data.table)
remove.packages("data.table")
library(data.table)
install.packages("data.table")
library(data.table)
snapshot()
library(packrat)
shapshot(0)
shapshot()
packrat::snapshot()
gen <- fread("inst/extdata/toy.gen", h = T)
summary <- fread("inst/extdata/full.summary")
library(coRge)
colnames(gen) <- paste0("V",1:ncol(gen))
snps <- causal.snps(summary)
colnames(snps)[3] <- "V3"
nrow(summary)
summary$k
summary <- fread("inst/extdata/summary.out")
summary <- fread("inst/extdata/summary.out", h = T)
snps <- causal.snps(summary)
colnames(snps)[3] <- "V3"
library(dplyr)
library(foreach)
libary(magrittr)
library(magrittr)
snps <- causal.snps(summary)
colnames(snps)[3] <- "V3"
message("Merging together and converting from Oxford to R format...")
comb <- as.data.frame(merge(gen, snps, by = "V3"))
comb
View(gen)
phen(.combR = gen)
phen(.combR = gen)[1:5]
nrow(gen)
ncol(gn)
ncol(genn)
ncol(gen)
Mgen <- as.matrix(gen[, -:15])
Mgen <- as.matrix(gen[, -1:5])
Mgen
gen[, -1:5]
gen[, 1:5]
typeof(gen)
gen
gen[1:5,]
gen[,1:5]
gen[,c(1:5)]
gen <- as.data.frame(gen)
gen[,c(1:5)]
gen[,1:5]
gen[,-1:5]
gen[,-(1:5)]
gen[,-(1:5)] %>% nrow
gen[,-(1:5)] %>% ncol
gen[,-(1:5)] %>% transpose()
gen[,-(1:5)] %>% transpose() %>% nrow
gen[,-(1:5)] %>% transpose() %>% ncol
genM <- as.matrix(gen[, - (1:5)])
nrow(genM)
ncol(genM)
phen(.combR = gen[-, genM])
phen(.combR = genM)
phen(.combR = gen)
phen(.combR = genM)
nrow(genM)
genM <- transpose(genM)
genM <- t(genM)
phen(.combR = genM)
b <- phen(.combR = genM)
b
b
for(i in seq(1, nrow(genM), by = 3)){
print(i)
}
typeof(genM)
genM
genM[2,]
for(i in seq(1, nrow(genM), by = 3)){
genM[i,] <- 0*genM[i,]
genM[i+1,] <- 1*genM[i+1,]
genM[i+2,] <- 2*genM[i+2,]
}
genM
genM %*% b
p2 <- vector()
for(i in seq(1, nrow(genM), by = 3)){
p2[(i+2)/3] <- p[i]+p[i+1]+p[i+2]
}
p2
p <- genM %*% b
p2 <- vector()
for(i in seq(1, length(p), by = 3)){
p2[(i+2)/3] <- p[i]+p[i+1]+p[i+2]
}
p2
gen[, -(1:5)] %>%
as.matrix %>%
t -> genM
# 9 betas
b <- phen(.combR = genM)
for(i in seq(1, nrow(genM), by = 3)){
genM[i,] <- 0*genM[i,]
genM[i+1,] <- 1*genM[i+1,]
genM[i+2,] <- 2*genM[i+2,]
}
p <- genM %*% b
p2 <- vector()
for(i in seq(1, length(p), by = 3)){
p2[(i+2)/3] <- p[i]+p[i+1]+p[i+2]
}
gen2r(gen)
snps
colnames(snps)
#' Takes gen file and calculates weighted allele scores (WAS)
#'
#' @param gen Truncated gen file with only causal snps
#' @param snps Truncated summary file with only causal snps
#'
#' @import data.frame
#' @import dplyr
#'
#' @return
#' @export
calculate_was <- function(gen = NULL, snps = NULL){
gen[, -(1:5)] %>%
as.matrix %>%
t -> genM
# 9 betas
b <- phen(.combR = genM)
for(i in seq(1, nrow(genM), by = 3)){
genM[i,] <- 0*genM[i,]
genM[i+1,] <- 1*genM[i+1,]
genM[i+2,] <- 2*genM[i+2,]
}
p <- genM %*% b
maf <- snps$all_maf
p2 <- vector()
for(i in seq(1, length(p), by = 3)){
j <- (i+2)/3
p2[j] <- p[i]+p[i+1]+p[i+2]-maf[j] # this might not be perfect
}
return(p2)
}
#' Takes gen file and calculates weighted allele scores (WAS)
#'
#' @param gen Truncated gen file with only causal snps
#' @param snps Truncated summary file with only causal snps
#'
#' @import data.frame
#' @import dplyr
#'
#' @return
#' @export
calculate_was <- function(gen = NULL, snps = NULL){
if(is.null(gen)) stop("Please input a gen matrix")
if(is.null(snps)) stop("Please input a snps matrix")
gen[, -(1:5)] %>%
as.matrix %>%
t -> genM
# 9 betas
b <- phen(.combR = genM)
for(i in seq(1, nrow(genM), by = 3)){
genM[i,] <- 0*genM[i,]
genM[i+1,] <- 1*genM[i+1,]
genM[i+2,] <- 2*genM[i+2,]
}
p <- genM %*% b
maf <- snps$all_maf
p2 <- vector()
for(i in seq(1, length(p), by = 3)){
j <- (i+2)/3
p2[j] <- p[i]+p[i+1]+p[i+2]-maf[j] # this might not be perfect
}
return(p2)
}
calculate_was(gen = gen, snps = snps)
nrow(gen)
library(devtools)
document()
document()
document()
document()
document()
gen[, -(1:5)] %>%
t -> genM
calculate_was(gen = gen, snps = snps)
nrow(gen)
data.table::fwrite()
devtools::install_github("Rdatatable/data.table")
data.table::fwrite
data.table::fwrite()
fwrite(gen, "test.txt", quote = F, col.names = F, row.names = F)
fwrite(gen, "test.txt", quote = F, col.names = F)
document()
genM
p
#' Calculates FDR given a data frame
#'
#' @param df Data frame of input
#'
#' @return A vector of results
#'
#' @export
fdr <- function(df = NULL){
if(is.null(df)) stop("Please input a data frame")
fp <- sum(!is.na(df$p.adj[df$p.adj < 0.05 & !(df$h1)]))
tp <- sum(!is.na(df$p.adj[df$p.adj < 0.05 & df$h1]))
fdr <- fp / (tp + fp)
return(c(fp, tp, fdr))
}
document()
document()
install.packages("pacman")
document()
___         __                _  _
/   \  ___  / _|  __ _  _   _ | || |_
/ /\ / / _ \| |_  / _` || | | || || __|
/ /_// |  __/|  _|| (_| || |_| || || |_
/___,'   \___||_|   \__,_| \__,_||_| \__|
