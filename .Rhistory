i <- 1
j <- 1
path <- paste("/scratch/hpc2862/CAMH/perm_container/container_",i,"_",j,"/")
path
path <- paste0("/scratch/hpc2862/CAMH/perm_container/container_",i,"_",j,"/")
path
paste0(path, "chr1_block_", i, "_perm_", j , "_k_1")
paste0(path, "chr1_block_", i, "_perm_", j , "_k_1.controls.gen")
?z.test
?ztest
?z.test
install.packages("BSDA")
library(BSDA)
r <- runif(100)
mean(r)
z.test(r, y = NULL, mu = 0)
z.test(r, y = NULL, mu = 0, sigma.x = NULL)
sd(r)
z.test(r, y = NULL, mu = 0, sigma.x = 0.2906)
summary(z.test(r, y = NULL, mu = 0, sigma.x = 0.2906))
pnorm(0.5)
pnorm(1)
pnorm(1.69)
pnorm(-1.69)
pnorm(abs(-1.69))
?rnorm
rnorm(19, mean = 22.6, 6.35)
z.test(rnorm(19, mean = 22.6, 6.35), mu = 19, sd = 6.35)
z.test(rnorm(19, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(19, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(19, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(19, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(19, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(19, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(19, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(19, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
q <- z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)
q$p.value
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value
for(i in 1:100){
sum((z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value < 0.05)
}
for(i in 1:100){
print(sum((z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value < 0.05))
}
for(i in 1:100){
(z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value < 0.05)
}
for(i in 1:100){
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35))$p.value < 0.05
}
for(i in 1:100){
z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)$p.value < 0.05
}
for(i in 1:100){
z[i<-z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)$p.value < 0.05
}
for(i in 1:100){
z[i]<-z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)$p.value < 0.05
}
for(i in 1:100){
z[i]<-z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)$p.value < 0.05
}
z <- list()
for(i in 1:100){
z[i]<-z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)$p.value < 0.05
}
z
sum(z)
sum(z, na.rm = T)
z
rnorm(30,22.6,6.35)
hist(rnorm(30,22.6,6.35))
hist(rnorm(30,22.6,6.35))
hist(rnorm(1000,22.6,6.35))
hist(rnorm(10000,22.6,6.35))
hist(rnorm(100000,22.6,6.35))
z <- vector()
for(i in 1:100){
z[i]<-z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)$p.value < 0.05
}
sum(z)
for(a in 1:100){
for(i in 1:100){+     z[i]<-z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)$p.value <0.05
+ }
}
a <- vector()
for(a in 1:100){
z <- vector()
for(i in 1:100){
z[i]<-z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)$p.value < 0.05
}
a[1] <- sum(z)
}
A <- vector()
for(a in 1:100){
z <- vector()
for(i in 1:100){
z[i]<-z.test(rnorm(30, mean = 22.6, 6.35), mu = 19, sigma.x = 6.35)$p.value < 0.05
}
A[a] <- sum(z)
}
A
mean(A)
mean(A);sd(A)
install.packages("data.table", repos = "http://cran.utstat.utoronto.ca/");library(data.table)
install.packages("dplyr", repos = "http://cran.utstat.utoronto.ca/");library(dplyr)
setwd("/Users/yvesmarcel/Documents/sFDR")
### initialize functions before
## can only use local cache
## module load Rscript
#want to use this, must modify to get rid of samplefile requirement; make up custom IDs for when translating to R......
#how, not sure.
SNPTEST_2_R <- function(genfile, local = TRUE) {
#install.packages("data.table", repos = "http://cran.utstat.utoronto.ca/");library(data.table)
#Read in genfile
if(local == TRUE){
gen <- genfile
} else if(local == FALSE){
gen <- fread(genfile, sep = " ", h = F); gen <- as.data.frame(gen)
}
#read in samplefile
#	samp <- fread(samplefile, sep = " ", h = T); samp <- as.data.frame(samp)
#clean up gen files
#gen[,1] <- NULL; gen[,3] <- NULL; gen[,4] <- NULL; gen[,5] <- NULL
#remove variable type in sample
#	samp <- samp[-1,]
output <- data.frame(matrix(nrow=((ncol(gen)-5)/3),ncol=(nrow(gen))))
for(row in 1:nrow(gen)) {
# go from 2 so not include index column
#subtract two so that last i is the third last element in the table, thus getting all people
for(i in seq(6,((ncol(gen)-2)),by=3)) {
#print(row)
j <- i + 1
h <- i + 2
one <- gen[row,i]
two <- gen[row,j]
three <- gen[row,h]
final <- NA
if (one > 0.9) {
final <- 0
} else if (two > 0.9) {
final <- 1
} else if (three > 0.9) {
final <- 2
} else {
final <- NA
}
output[(i/3-1),row] <- final
}
}
colnames(output) <- gen[,3]
#R_table <- cbind(samp,output)
return(output)
#rm(gen,samp,output)
}
rand <- function(n = NULL, sum = NULL, start = 0){
v2 <- vector()
start <- 0
end <- sum
v <- runif(n-1, start, sum)
v[n] <- 0
v[n+1] <- sum
v <- sort(v)
for(i in 1:n){
v2[i] <- v[i+1]-v[i]
}
return(v2)
}
rand0 <- function(){
num <- vector()
n <- runif(1,0,1)
if(n > 0.5){
num <- 1
} else if(n < 0.5){
num <- -1
} else{
break("Random generator malfunction in delta")
}
return(num)
}
### ---------------- !!!
##                   !!!
# SCRIPT STARTS HERE !!!
##                   !!!
### ---------------- !!!
## hard coded for now, but will switch to relative
#gen <- fread(paste0(path, "chr1_block_", i, "_perm_1_k_", j, "1.controls.gen"), h = F, sep = " ")
gen1 <- fread("head.gen", h = F, sep = " ")
gen1 <- as.data.frame(gen1)
## get rid of meta columns on gen files
## hard coded for now but will switch to relative
#for(i in 2:10){
#  get(paste0("gen", i))[,1:5] <- NULL
#}
gen <- gen1
colnames(gen) <- paste0("V",1:ncol(gen))
## Select SNPs
# Based on MAF 0.05 - 0.5, uniform
summary <- fread("snp_summary.out", h = T, sep = " ")
gene_list <- read.table("gene_list.txt", h = T, sep = "\t")
gene_list
for(i in 1:nrow(gene_list)){
name <- paste0("gene_", i)
summary %>% filter(position > gene_list[[i,2]]) %>% filter(position < gene_list[[i,3]]) %>% select(rsid, chromosome, position, all_maf) -> gene
gene$select <- 1
gene$causal <- 0
gene[ceiling(runif(1,1,nrow(gene))),"causal"] <- 1
assign(name, gene)
}
genes <- rbind(gene_1, gene_2, gene_3, gene_4, gene_5, gene_6, gene_7, gene_8, gene_9, gene_10)
genes
genes$causal <- NULL
genes$select <- NULL
genes <- rbind(gene_1, gene_2, gene_3, gene_4, gene_5, gene_6, gene_7, gene_8, gene_9, gene_10)
genes %>% filter(causal == 1) -> snps
genes$causal <- NULL
genes$select <- NULL
colnames(snps) <- c("rsid", "chromosomes", "V3", "all_maf")
comb <- merge(gen, snps, by = "V3")
comb <- as.data.frame(comb)
## eliminate overlap
comb$rsid <- NULL; comb$chromosomes <- NULL; comb$all_maf <- NULL
#comb$V1 <- NULL
#comb$V2 <- NULL
#comb$V4 <- NULL
#comb$V5 <- NULL
##translate snptest to r format
#we need row names here; take them from the smaple file but we just want the row names, not the phenotypes...  dont know how to do this yet/
combR <- SNPTEST_2_R(genfile = comb, local = TRUE)
## add row names to this from the sample file
samp <- vector()
n_people <- nrow(combR) ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
## -------------------------
## use internal instead
#
#samp <- fread("test.cases.sample", h = T, sep = " ")
#samp <- samp[-1,]
#
## --------------------------
row.names(combR) <- samp$ID_1
#combR$ID_2 <- samp$ID_2
### obsolete -------------------
##make sure theyre the same length
#if(length(combR) == length(samp)){
#  print("all good")
#} else if(length(combR) == length(samp)){
#  print("lengths dont match up... check sample file")
#}
### obsolete ---------------------
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = ncol(combR), sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
snps <- as.data.frame(snps)
## calulate beta
for(i in 1:ncol(combR)){
b[i] <- rand0()*sqrt(sd2[i]/(2*snps[i,"all_maf"]*(1-snps[i,"all_maf"])))
}
## calculate WAS
for(i in 1:nrow(combR)){
for(j in 1:ncol(combR)){
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
}
WAS <- rowSums(combR)
Z <- vector()
for(i in 1:length(WAS)){
Z[i] <- WAS[i] + rnorm(1, 0, sd = sqrt(0.55))
}
samp$Z <- Z
#phen <- cbind(samp$ID_2, samp$ID_1, samp$missing, Z)
#phen <- as.data.frame
var <- data.frame(0, 0, 0, "C")
samp$Z <- as.character(samp$Z)
colnames(var) <- colnames(samp)
samp <- rbind(var, samp)
#samp$missing <- NULL
write.table(samp, paste0(path,"phen_test.sample"), quote = FALSE, row.names=F, col.names = T, sep = "\t")
write.table(gen, paste0(path,"gen_test.gen"), quote = FALSE, row.names = F, col.names = F)
write.table(snps, paste0(path,"snptlist.txt"), quote = FALSE, row.names=F, col.names = T, sep = "\t")
write.table(genes, paste0(path,"genelist.txt"), quote = FALSE, row.names=F, col.names = T, sep = "\t")
snps
colnames(snps) <- c("rsid", "chromosomes", "V3", "all_maf", "select", "causal")
comb <- merge(gen, snps, by = "V3")
comb <- as.data.frame(comb)
comb
gen
snps
comb <- merge(gen, snps)
comb
?suTTary
library(ggvis)
- Bullet 1
- Bullet 4
test_presentation
========================================================
author: Christopher Cole
date: June 4
First Slide
========================================================
For more details on authoring R presentations click the
**Help** button on the toolbar.
- Bullet 1
- Bullet 2
- Bullet 3
- Bullet 4
Slide With Code
========================================================
```{r}
summary(cars)
```
Slide With Plot
========================================================
```{r, echo=FALSE}
plot(cars)
```
For more details on authoring R presentations click the
library("ggvis")
install.packages("ggvis")
library(ggvis)
ls()
p <- ggvis(mtcars, x = ~wt, y = ~mpg)
layer_points(p)
mtcars %>% ggvis(~wt, ~mpg, shape := "cross") %>% layer_points(fill.hover := "red")
mtcars %>% ggvis(~wt, ~mpg, shape := "cross") %>% layer_points(fill.hover := "red") %>% add_tooltip(function(data) data$dist)
mtcars
mtcars %>% ggvis(~wt, ~mpg, shape := "cross") %>% layer_points(fill.hover := "red") %>% add_tooltip(function(data) data$disp)
?add_tooltip
cars %>%
ggvis(~speed, ~dist) %>%
layer_points(fill.hover := "red") %>%
add_tooltip(function(data) data$dist)
mtcars %>%
ggvis(~wt) %>%
layer_histograms(width =  input_slider(0, 2, step = 0.10, label = "width"),
center = input_slider(0, 2, step = 0.05, label = "center"))
mtcars %>% ggvis(~wt, ~mpg, shape := "cross") %>% layer_points(fill.hover := "red") %>% add_tooltip(function(data) data$disp)
