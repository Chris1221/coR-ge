#'
#' @export
phen <- function(nr = nrow(combR), nc = ncol(combR), snps = snps){
if(!exists("nr")) stop("Something went wrong, check the combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(combR) <- samp$ID_1
message("Calculating phenotypes...")
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
snps <- as.data.frame(snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*snps[i,"all_maf"]*(1-snps[i,"all_maf"])))
}
}
snps
phen()
phen(100, 1000, snps = snps)
#' Phenotype Calculation
#'
#' @param nr Number of rows
#' @param nc Number of columns
#' @param snps SNPs matrix
#'
#' @export
phen <- function(nr = nrow(combR), nc = ncol(combR), snps = snps, combR = combR){
if(!exists("nr")) stop("Something went wrong, check the combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(combR) <- samp$ID_1
message("Calculating phenotypes...")
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
snps <- as.data.frame(snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*snps[i,"all_maf"]*(1-snps[i,"all_maf"])))
}
}
comb <- gen
comb$rsid
#' Oxford style genotype conversion
#'
#' @param genfile File to convert
#' @param local TRUE is the file is already in the R workspace. FALSE if the file is a path which must be read in.
gen2r <- function(genfile, local = TRUE) {
#Read in genfile
if(local == TRUE){
gen <- genfile
} else if(local == FALSE){
gen <- fread(genfile, sep = " ", h = F); gen <- as.data.table(gen)
}
output <- data.frame(matrix(nrow=((ncol(gen)-5)/3),ncol=(nrow(gen))))
foreach(row = 1:nrow(gen)) %:% foreach(i = seq(6,((ncol(gen)-2)),by=3)) %do% {
#print(row)
j <- i + 1
h <- i + 2
one <- gen[row,i]
two <- gen[row,j]
three <- gen[row,h]
final <- NA
if (one > 0.9) {
final <- 0
} else if (two > 0.9) {
final <- 1
} else if (three > 0.9) {
final <- 2
} else {
final <- NA
}
output[(i/3-1),row] <- final
}
colnames(output) <- gen[,3]
#R_table <- cbind(samp,output)
return(output)
#rm(gen,samp,output)
}
combR <- gen2r(genfile = comb, local = TRUE)
#' Phenotype Calculation
#'
#' @param nr Number of rows
#' @param nc Number of columns
#' @param snps SNPs matrix
#'
#' @export
phen <- function(nr = nrow(combR), nc = ncol(combR), snps = snps, combR = combR){
if(!exists("nr")) stop("Something went wrong, check the combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(combR) <- samp$ID_1
message("Calculating phenotypes...")
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
snps <- as.data.frame(snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*snps[i,"all_maf"]*(1-snps[i,"all_maf"])))
}
}
phen()
#' Phenotype Calculation
#'
#' @param nr Number of rows
#' @param nc Number of columns
#' @param snps SNPs matrix
#'
#' @export
phen <- function(snps = snps, combR = combR){
nr = nrow(combR)
nc = ncol(combR)
if(!exists("nr")) stop("Something went wrong, check the combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(combR) <- samp$ID_1
message("Calculating phenotypes...")
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
snps <- as.data.frame(snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*snps[i,"all_maf"]*(1-snps[i,"all_maf"])))
}
}
phen()
head(combR)
nrow(combR)
#' Phenotype Calculation
#'
#' @param .snps SNPs matrix
#' @param .combR combR matrix
#'
#' @export
phen <- function(.snps = snps, .combR = combR){
nr = nrow(.combR)
nc = ncol(.combR)
if(!exists("nr")) stop("Something went wrong, check the .combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(.combR) <- samp$ID_1
message("Calculating phenotypes...")
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
.snps <- as.data.frame(.snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*.snps[i,"all_maf"]*(1-.snps[i,"all_maf"])))
}
}
phen()
#' Phenotype Calculation
#'
#' @param .snps SNPs matrix
#' @param .combR combR matrix
#'
#' @export
phen <- function(.snps = snps, .combR = combR){
message("Calculating phenotypes...")
nr = nrow(.combR)
nc = ncol(.combR)
if(!exists("nr")) stop("Something went wrong, check the .combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(.combR) <- samp$ID_1
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
.snps <- as.data.frame(.snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*.snps[i,"all_maf"]*(1-.snps[i,"all_maf"])))
}
message("Done!")
}
#' Phenotype Calculation
#'
#' @param .snps SNPs matrix
#' @param .combR combR matrix
#'
#' @export
phen <- function(.snps = snps, .combR = combR){
message("Calculating phenotypes...")
nr = nrow(.combR)
nc = ncol(.combR)
if(!exists("nr")) stop("Something went wrong, check the .combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(.combR) <- samp$ID_1
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
.snps <- as.data.frame(.snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*.snps[i,"all_maf"]*(1-.snps[i,"all_maf"])))
}
return(b)
message("Done!")
}
phen()
#' Phenotype Calculation
#'
#' @param .snps SNPs matrix
#' @param .combR combR matrix
#'
#' @export
phen <- function(.snps = snps, .combR = combR){
message("Calculating phenotypes...")
nr = nrow(.combR)
nc = ncol(.combR)
if(!exists("nr")) stop("Something went wrong, check the .combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(.combR) <- samp$ID_1
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
.snps <- as.data.frame(.snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*.snps[i,"all_maf"]*(1-.snps[i,"all_maf"])))
}
message("Done!")
return(b)
}
phen()
for(i in 1:nrow(combR)){
for(j in 1:ncol(combR)){
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
}
b <- phen()
for(i in 1:nrow(combR)){
for(j in 1:ncol(combR)){
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
}
b[1]
ncol(combR)
snps
for(i in 1:nrow(combR)){
for(j in 1:ncol(combR)){
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
}
comb[1,2]
comb[1,2]*b[2]
comb[1,2]*b[2] - b[2]*snps[j, "all_maf"]
comb[1,2]*b[2] - b[2]
*snps[j, "all_maf"]
snps[j, "all_maf"]
is.data.table(snps)
snps <- as.data.frame(snps)
for(i in 1:nrow(combR)){
for(j in 1:ncol(combR)){
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
}
foreach(i = 1:nrow(combR)) %:% foreach(j = 1:ncol(combR)) %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
?foreach
foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR)) %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
r <- foreach(i = 1:nrow(combR), .combine = ) %:% foreach(j = 1:ncol(combR)) %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
r <- as.data.frame(r)
View(r)
r <- foreach(i = 1:nrow(combR), .combine = 'rbind' ) %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"]
}
View(r)
r2 <- as.data.frame(r)
View(r2)
View(combR)
combR <- gen2r(genfile = comb, local = TRUE)
View(combR)
any(combR != 0)
WAS <- rowSums(combR)
Z <- vector()
Z <- foreach(i = 1:length(WAS), .combine = 'c') WAS[i] + rnorm(1, 0, sd = sqrt(0.55))
Z <- foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55))
Z
samp$Z <- as.character(foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55)))
?assign
#' Phenotype Calculation
#'
#' @param .snps SNPs matrix
#' @param .combR combR matrix
#'
#' @export
phen <- function(.snps = snps, .combR = combR){
message("Calculating phenotypes...")
nr = nrow(.combR)
nc = ncol(.combR)
if(!exists("nr")) stop("Something went wrong, check the .combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(.combR) <- samp$ID_1
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
.snps <- as.data.frame(.snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*.snps[i,"all_maf"]*(1-.snps[i,"all_maf"])))
}
message("Done!")
return(b)
assign("samp", samp, env = globalenv())
}
combR <- gen2r(genfile = comb, local = TRUE)
b <- phen()
combR <- as.data.frame(foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"] })
WAS <- rowSums(combR)
samp$Z <- as.character(foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55)))
var <- data.frame(0, 0, 0, "C")
samp$Z <- as.character(samp$Z)
colnames(var) <- colnames(samp)
samp <- rbind(var, samp)
samp
#' Phenotype Calculation
#'
#' @param .snps SNPs matrix
#' @param .combR combR matrix
#'
#' @export
phen <- function(.snps = snps, .combR = combR){
message("Calculating phenotypes...")
nr = nrow(.combR)
nc = ncol(.combR)
if(!exists("nr")) stop("Something went wrong, check the .combR matrix.")
samp <- vector()
n_people <- nr ## make sure this is right...
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_2, ID_1)
samp <- as.data.frame(samp)
samp$missing <- 0
row.names(.combR) <- samp$ID_1
###calculate phenotypes HERE
pheno <- vector()
WAS <- vector()
Zscore <- vector()
## generate variance residuals
sd2 <- rand(n = nc, sum = 0.45)
results <- vector()
results <- as.data.frame(results)
b <- vector()
.snps <- as.data.frame(.snps)
## calulate beta
for(i in 1:nc){
b[i] <- rand0()*sqrt(sd2[i]/(2*.snps[i,"all_maf"]*(1-.snps[i,"all_maf"])))
}
message("Done!")
assign("samp", samp, env = globalenv())
return(b)
}
phen()
samp
combR <- gen2r(genfile = comb, local = TRUE)
b <- phen()
combR <- as.data.frame(foreach(i = 1:nrow(combR), .combine = 'rbind') %:% foreach(j = 1:ncol(combR), .combine = 'c') %do% {
combR[i,j] <- combR[i,j]*b[j] - b[j]*snps[j,"all_maf"] })
WAS <- rowSums(combR)
samp$Z <- as.character(foreach(i = 1:length(WAS), .combine = 'c') %do% WAS[i] + rnorm(1, 0, sd = sqrt(0.55)))
var <- data.frame(0, 0, 0, "C")
samp$Z <- as.character(samp$Z)
colnames(var) <- colnames(samp)
samp <- rbind(var, samp)
?fwrite
fwrite()
?fwrite()
??fwrite()
install_github("Rdatatable/data.table")
library(devtools)
install_github("Rdatatable/data.table")
library(data.table)
fwrite
fread
fread()
install.packages("data.table")
library(data.table)
remove.packages("data.table")
install_github("Rdatatable/data.table")
library(data.table)
package.remove("data.table")
remove.packages("data.table")
install.packages("data.table")
library(data.table)
R.Version()
remove.packages("gbm"); install.packages("gbm"); library(gbm)
install_github("Chris1221/mineR")
library(devtools)
install_github("Chris1221/mineR")
colnames(snps)
k <- c(1,2,3,4)
for k {}
for(k){
print(k)
}
for(.k in k) print (k)
