{"name":"coR-ge","tagline":"Software for the Examination of Multiple Correction Methodologies in Accurate Genomic Environments","body":"## Quick-start Guide.\r\n\r\nWelcome to the landing page for **coR-ge** (**cor**ection of **ge**nomes in **R**). This software is in active development, and pull requests are welcome on any of the branches. Please find below instructions for use cases. For more complex use, please contact the maintainer by [raising an issue](https://github.com/Chris1221/sFDR/issues/new) on the project repository.\r\n\r\nThis project was presented at the Compute Canada's High Powered Computer Symposium in June 2015. The [abstract](https://github.com/Chris1221) and [poster PDF](https://github.com/Chris1221) are also found in the repository. \r\n\r\n### Program Structure\r\n\r\nHeuristically, **coR-ge** is structured as follows.  \r\n\r\n\r\n![Logic Flow](https://raw.githubusercontent.com/Chris1221/sFDR/gh-pages/assets/images/logic_flow.png)\r\n\r\nIn reality, these three steps are divided into different files in the repository.  The quick start guide will nonetheless follow this logic flow in order to simplify matters.   \r\n\r\n### Requirements\r\n\r\n**coR-ge** requires the following: \r\n\r\n* This program requires a cluster system set up on either `SGE` or `PBS` architecture, running `qsub`.  It can be easily modified to use `bsub` as well with minimal effort.\r\n* Any base unix system to run on.  The program has been tested on `CentOS` and `OSX`.  Dependency issues should be reported as an [issue](https://github.com/Chris1221/sFDR/issues/new) on the main repository. \r\n* `R` version > 3.0.0 able to run `dplyr` and `data.frame`\r\n* `Rscript` in `$PATH` or located at `/usr/bin/Rscript`\r\n* `Python` v. 2.7.*\r\n* A temporary storage drive with n*560G free space, where n is the number of runs you would like to perform simultaneously. \r\n* 156G RAM recommended. Be aware that improper allocation of jobs can easily cause swapping of nodes on the cluster.  We have included a delayed submission script to ameliorate this problem. \r\n* Latest build of 1000 Genomes in IMPUTE2 format (`*.legend`, `*.haps`, `*.sample`) in any directory that has sufficient storage room.  Name this directory; it will hereafter be named `$REF`\r\n\r\n### Installation \r\n\r\nClone the repository to your working directory (hereafter known as `$WD`):\r\n\r\n    $ cd $WD\r\n    $ git clone https://github.com/Chris1221/sFDR\r\n    $ git checkout master\r\n    $ cd sFDR/\r\n\r\nEnsure that you are on the master branch for now.  \r\n\r\nSeveral files will have to be edited, and these will be addressed in turn. \r\n\r\n### Disease Model\r\n\r\nThe file `rand.R` contains the information for the disease model. We will edit a few things here to specify individual parameters for the run.  At the top of the script, you must edit the following parameters.  Defaults are displayed, and must be edited:\r\n\r\n    heritability <- 0.45\r\n    noise_var <- 0.55\r\n    sim_file_path <- getwd()\r\n    wd <- getwd()\r\n    snp_summary <- \"snp_summary.out\"\r\n\r\nTo filter based on minor allele frequency, you must generate a file named `snp_summary.out` (or whatever you set the file name as in `rand.R`) using SNPTEST2. See [here](https://mathgen.stats.ox.ac.uk/genetics_software/snptest/old/snptest.html#Data_Summaries_) for an example of this.\r\n\r\nIn this script, you can manually or randomly generate causal loci (~ line 160).  If you would like to manually assign variants, choose your SNPs and assign them a column named \"causal\" equal to one, and pass only causal SNPs to the `snps` data frame.  `snps` must contain four columns, an example is given below: \r\n\r\n    rsid chromosomes bp all_maf\r\n    rs_1 1           1  0.30\r\n    rs_2 1           2  0.35\r\n    rs_3 1           3  0.05\r\n\r\nIf the selection of the SNPs is based on some parameter, simply subset the `summary` object to select only causal loci.  In the following simple example, we select 50 random SNPs with minor allele frequency between 0.05 and 0.5 using the `dplyr` library. \r\n\r\n    library(dplyr)\r\n    summary %>%\r\n        filter(all_maf > 0.05) %>% \r\n            filter(all_maf < 0.5) %>% \r\n                sample_n(50) %>% \r\n                    select(rsid, chromosomes, bp, all_maf) -> snps\r\n\r\nIn a more complex situation, one may wish to select a group of genes, selecting one causal variant from each.  In the following example, we import a table of 10 genes with start and end positions, and randomly select one causal variant from each of the genes.  Additional information is retained so that the start and end positions can be used to decide a priority strata for sFDR.\r\n\r\n    #Read in list of genes.  First column is gene name, second is physical start position in bp, third is end position in bp.\r\n    gene_list <- read.table(\"gene_list.txt\", h = T, sep = \"\\t\")\r\n\r\n    #select one random SNP from each gene\r\n    for(i in 1:nrow(gene_list)){\r\n\r\n     name <- paste0(\"gene_\", i)\r\n\r\n     #grab only SNPs within gene boundaries \r\n     summary %>% filter(position > gene_list[[i,2]]) %>% filter(position < gene_list[[i,3]]) %>% select(rsid, chromosome,     position, all_maf) -> gene\r\n     gene$select <- 1\r\n     gene$causal <- 0\r\n\r\n     #grab random snp\r\n     gene[ceiling(runif(1,1,nrow(gene))),\"causal\"] <- 1\r\n     assign(name, gene)\r\n    }\r\n\r\n    genes <- rbind(gene_1, gene_2, gene_3, gene_4, gene_5, gene_6, gene_7, gene_8, gene_9, gene_10)\r\n    \r\n    #or\r\n    #genes <- rbind(ls()[grepl(\"gene_[0-9]\", ls())])\r\n    \r\n    genes %>% filter(causal == 1) -> snps\r\n    \r\n    #clear extra columns\r\n    snps$causal <- NULL\r\n    snps$select <- NULL\r\n\r\nThe previous examples illustrate the concept behind SNP selection, but any selection can be made as long as the correct columns are passed to `snps` prior to the renaming step. \r\n\r\n### Resampling and Model Propagation\r\n\r\nIn `i_array.sh`, `j_array.sh`, and `k_array.sh`, set the `$DIR` variable with the directory where you are storing the reference genotypes. Set the `$OUT` variable for where you would like to house the output. Edit the directives to fit your cluster set-up.\r\n\r\nStart the generation of resampled genotypes with `hapgen2`.  For 30 trials (approximately 1.7 TB of free space required):\r\n\r\n    for i in {1..3}\r\n    do\r\n      for j in {1..10}\r\n      do\r\n        bash i_array $i $j\r\n      done\r\n    done\r\nor\r\n    bash sub_script.sh $i_limit $j_limit\r\nfor ease of use. \r\n\r\nThis will begin the submission of many small jobs.  If any jobs fail on your system, please post the full log file in an issue.\r\n\r\n### Analysis and Comparison of MTC Methodologies.  \r\n\r\nIn `correct_and_report.R`, rename the `path` variable to the location of your simulated genotypes. Again specify the location of the `snp_summary.out` file in the `summary` object. This script inherits properties from `correct.R`, and will run as long as the `snps` object was passed correctly.  \r\n\r\nReported by default are: \r\n* Aggregated FDR True Positive\r\n* Aggregated FDR False Positive\r\n* Aggregated FDR True Negative\r\n* Aggregated FDR False Negative\r\n* Bonferroni True Positive\r\n* Bonferroni False Positive\r\n* Bonferroni True Negative\r\n* Bonferroni False Negative\r\n* Stratified FDR True Positive\r\n* Stratified FDR False Positive\r\n* Stratified FDR True Negative\r\n* Stratified FDR False Negative\r\n\r\nIn that order, written to a file named `results.txt`.  The strata for sFDR are by default randomly selected in a stepwise manner, but this behaviour can be easily modified.\r\n\r\nAfter all of the `k_array.sh` jobs have finished, run the `clean_comb.sh` script in the same manner as `i_array.sh` with input arguments $i and $j.\r\n\r\n### Example use cases\r\n\r\n**coR-ge** has been used successfully to demonstrate an increase in true positives and a decrease in false negatives when tests are stratified with prior information.\r\n\r\nWe present the following as a case study. Figures a and b display the differential true positive and false positive rates respectively between stratified FDR and FDR correction grouped by number of “nonsense” variants in priority strata. Displayed are the differences between the two methodologies with kernel density estimate. 50 causal loci simulated on 1000 Genomes CEU reference panel with 0.45 disease heritability assumed on chromosome 1 for 100 permutations.\r\n\r\nImprovement of true discovery rate between sFDR and FDR correction\r\nmethodologies.\r\n![TP](https://raw.githubusercontent.com/Chris1221/sFDR/gh-pages/assets/images/fig_1.png)\r\n\r\nDecrease in false positive detection between sFDR and FDR correction methodologies.\r\n\r\n![FP](https://raw.githubusercontent.com/Chris1221/sFDR/gh-pages/assets/images/fig_2.png)\r\n\r\nContinuing the case study, differential effects of causal variant minor allele frequencies are examined in stratified FDR and reported grouped by number of “nonsense” variants in the priority strata. Five causal loci with effect sizes following a uniform distribution were simulated in each of the MAF groups in order to further elucidate the heuristic qualities of stratified FDR correction in genomic environments. Five causal variants simulated in each category with equal effect sizes (Type II ANOVA P = 0.2026). Simulated on 1000 Genomes CEU population chromosome 1 using a disease model with 0.45 heritability for 100 permutations.\r\n\r\n![MAF](https://raw.githubusercontent.com/Chris1221/sFDR/gh-pages/assets/images/fig_3.png)\r\n\r\n**coR-ge** can be used for any methodology, for any grouping of SNPs, and any grouping of reporting.  If you have used **coR-ge** in any publication, kindly cite this page. Code for the previously mentioned examples can be found in the `master` and `MAF` branches respectively. \r\n\r\n### Development Goals\r\n\r\n* More user-friendly interface\r\n* Better documentation with comprehensive guide\r\n* Compiled binary with `.config` file\r\n\r\n### Help / Guidance \r\n\r\nPlease post an issue on the repository, or email the maintainer with the email mentioned on his profile.  We welcome assistance from individuals wishing to contribute to the development of **coR-ge**.  Any questions will be answered quickly and as completely as possible. \r\n\r\n### Acknowledgements\r\n\r\nThe maintainer would like to thank Joanne Knight of CAMH, who has provided guidance throughout the development of this project.  He would also like to thank the statistical genetics group at CAMH for guidance and assistance during development. \r\n\r\nWe would like to thank the R core team for the creation of an environment in which such projects are possible, as well as specifically Hadley Wickham for his `tidyr`-`dplyr`-`ggplot`/`ggvis` pipeline, which has proved invaluable. \r\n\r\nWe acknowledge funding from The Institute of Medical Science at the University of Toronto, NSERC, the Centre for Addiction and Mental Health (CAMH) and the University of Ottawa. \r\n\r\n### References\r\n\r\n1. Sun, L., Craiu, R. V, Paterson, A. D., & Bull, S. B. (2006). Stratified false discovery\r\ncontrol for large-scale hypothesis testing with application to genome-wide association\r\nstudies. Genetic Epidemiology, 30(6), 519–30.\r\n\r\n2. Su, Z., Marchini, J., & Donnelly, P. (2011). HAPGEN2: simulation of multiple disease\r\nSNPs. Bioinformatics, 27(16), 2304–2305.\r\n\r\n3. Tune H. Pers, Juha M. Karjalainen, Yingleong Chan, Harm-Jan Westra, Andrew R.\r\nWood, Jian Yang, Julian C. Lui, Sailaja Svedantam, Stefan Gustafsson, Tonu Esko, Tim\r\nFrayling, Elizabeth K. Speliotes, Genetic Investigation of ANthropometric Traits\r\n(GIANT) Con, L. F. (2015). Biological interpretation of genome-wide association studies\r\nusing predicted gene functions.","google":"UA-63747419-1","note":"Don't delete this file! It's used internally to help with page regeneration."}